window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "painto", "modulename": "painto", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "painto.Color", "modulename": "painto", "qualname": "Color", "kind": "class", "doc": "<p>A color class that represents RGBA colors and supports various operations.</p>\n\n<p>The Color class can be initialized from:</p>\n\n<ul>\n<li>Color names (e.g., \"red\", \"blue\")</li>\n<li>Hex strings (e.g., \"#FF0000\" or \"#FF0000FF\")</li>\n<li>RGB/RGBA tuples (e.g., (255, 0, 0) or (255, 0, 0, 255))</li>\n</ul>\n\n<p>Features:</p>\n\n<ul>\n<li>Arithmetic operations (+, *, /) for color blending and brightness adjustment</li>\n<li>Comparison operations for sorting by brightness</li>\n<li>Properties for accessing components (r, g, b, a, rgb, rgba, hex, name)</li>\n<li>Conversion methods for different color formats</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">red</span> <span class=\"o\">=</span> <span class=\"n\">Color</span><span class=\"p\">(</span><span class=\"s2\">&quot;red&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">blue</span> <span class=\"o\">=</span> <span class=\"n\">Color</span><span class=\"p\">(</span><span class=\"s2\">&quot;#0000FF&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">purple</span> <span class=\"o\">=</span> <span class=\"n\">red</span> <span class=\"o\">+</span> <span class=\"n\">blue</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">darker_purple</span> <span class=\"o\">=</span> <span class=\"n\">purple</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n</code></pre>\n  </div>\n</blockquote>\n", "bases": "builtins.tuple"}, {"fullname": "painto.Color.__init__", "modulename": "painto", "qualname": "Color.__init__", "kind": "function", "doc": "<p>Initialize a Color instance.</p>\n\n<h6 id=\"args-can-be\">Args can be:</h6>\n\n<blockquote>\n  <ul>\n  <li>Single str arg: Color name or hex string</li>\n  <li>Single tuple arg: RGB(A) tuple</li>\n  <li>Three ints: r,g,b values</li>\n  <li>Four ints: r,g,b,a values</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"kwargs-can-include\">Kwargs can include:</h6>\n\n<blockquote>\n  <p>name: Optional name for the color\n  source: Optional source identifier</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "painto.Color.rgba", "modulename": "painto", "qualname": "Color.rgba", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Tuple[int, int, int, int]"}, {"fullname": "painto.Color.r", "modulename": "painto", "qualname": "Color.r", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "painto.Color.g", "modulename": "painto", "qualname": "Color.g", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "painto.Color.b", "modulename": "painto", "qualname": "Color.b", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "painto.Color.a", "modulename": "painto", "qualname": "Color.a", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "painto.Color.rgb", "modulename": "painto", "qualname": "Color.rgb", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Tuple[int, int, int]"}, {"fullname": "painto.Color.hls", "modulename": "painto", "qualname": "Color.hls", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Tuple[float, float, float]"}, {"fullname": "painto.Color.hsv", "modulename": "painto", "qualname": "Color.hsv", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Tuple[float, float, float]"}, {"fullname": "painto.Color.h", "modulename": "painto", "qualname": "Color.h", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "painto.Color.s", "modulename": "painto", "qualname": "Color.s", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "painto.Color.v", "modulename": "painto", "qualname": "Color.v", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "painto.Color.luminosity", "modulename": "painto", "qualname": "Color.luminosity", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "painto.Color.grayscale", "modulename": "painto", "qualname": "Color.grayscale", "kind": "variable", "doc": "<p></p>\n", "annotation": ": painto.color.Color"}, {"fullname": "painto.Color.hex", "modulename": "painto", "qualname": "Color.hex", "kind": "variable", "doc": "<p>Return the color as a hex string.</p>\n", "annotation": ": str"}, {"fullname": "painto.Color.name", "modulename": "painto", "qualname": "Color.name", "kind": "variable", "doc": "<p>Return the friendly name if it exists, otherwise the hex value.</p>\n", "annotation": ": str"}, {"fullname": "painto.Color.source", "modulename": "painto", "qualname": "Color.source", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "painto.Color.foreground", "modulename": "painto", "qualname": "Color.foreground", "kind": "variable", "doc": "<p>Presuming self is the background color, return a contrasting\nforeground color for text. Will return black or white, whichever is\nis more visible on the background.</p>\n", "annotation": ": painto.color.Color"}, {"fullname": "painto.Color.ansi_escape", "modulename": "painto", "qualname": "Color.ansi_escape", "kind": "variable", "doc": "<p>Gets the ANSI escape sequence for setting text color.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: ANSI escape sequence that sets text foreground color to this color.</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">red</span> <span class=\"o\">=</span> <span class=\"n\">Color</span><span class=\"p\">(</span><span class=\"s2\">&quot;red&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">red</span><span class=\"o\">.</span><span class=\"n\">ansi_escape</span><span class=\"si\">}</span><span class=\"s2\">This text is red</span><span class=\"si\">{</span><span class=\"n\">red</span><span class=\"o\">.</span><span class=\"n\">ansi_reset</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n\n<p>This can be combined with ansi_escape_bg to set a background color and text color.</p>\n\n<h6 id=\"example-2\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">red</span> <span class=\"o\">=</span> <span class=\"n\">Color</span><span class=\"p\">(</span><span class=\"s2\">&quot;red&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">black</span> <span class=\"o\">=</span> <span class=\"n\">Color</span><span class=\"p\">(</span><span class=\"s2\">&quot;black&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">red</span><span class=\"o\">.</span><span class=\"n\">ansi_escape_bg</span><span class=\"si\">}{</span><span class=\"n\">black</span><span class=\"o\">.</span><span class=\"n\">ansi_escape</span><span class=\"si\">}</span><span class=\"s2\">A red background with black text</span><span class=\"si\">{</span><span class=\"n\">red</span><span class=\"o\">.</span><span class=\"n\">ansi_reset</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "painto.Color.ansi_escape_bg", "modulename": "painto", "qualname": "Color.ansi_escape_bg", "kind": "variable", "doc": "<p>Gets the ANSI escape sequence for setting background color to this color.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: ANSI escape sequence that sets background color to this color.</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">red</span> <span class=\"o\">=</span> <span class=\"n\">Color</span><span class=\"p\">(</span><span class=\"s2\">&quot;red&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">red</span><span class=\"o\">.</span><span class=\"n\">ansi_escape_bg</span><span class=\"si\">}</span><span class=\"s2\">This text has a red background</span><span class=\"si\">{</span><span class=\"n\">red</span><span class=\"o\">.</span><span class=\"n\">ansi_reset</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n\n<p>This can be combined with ansi_escape to set a background color and text color.</p>\n\n<h6 id=\"example-2\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">red</span> <span class=\"o\">=</span> <span class=\"n\">Color</span><span class=\"p\">(</span><span class=\"s2\">&quot;red&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">black</span> <span class=\"o\">=</span> <span class=\"n\">Color</span><span class=\"p\">(</span><span class=\"s2\">&quot;black&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">red</span><span class=\"o\">.</span><span class=\"n\">ansi_escape_bg</span><span class=\"si\">}{</span><span class=\"n\">black</span><span class=\"o\">.</span><span class=\"n\">ansi_escape</span><span class=\"si\">}</span><span class=\"s2\">A red background with black text</span><span class=\"si\">{</span><span class=\"n\">red</span><span class=\"o\">.</span><span class=\"n\">ansi_reset</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "painto.Color.ansi_reset", "modulename": "painto", "qualname": "Color.ansi_reset", "kind": "variable", "doc": "<p>Gets the ANSI escape sequence to reset colors.\nThis is the same for all colors, so it's just a convenient alias. Without putting\nthis in your console output the colors will persist until the next color change\nonto future lines.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: ANSI escape sequence that resets all colors to default.</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">red</span> <span class=\"o\">=</span> <span class=\"n\">Color</span><span class=\"p\">(</span><span class=\"s2\">&quot;red&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">red</span><span class=\"o\">.</span><span class=\"n\">ansi_escape_bg</span><span class=\"si\">}</span><span class=\"s2\">This text has a red background</span><span class=\"si\">{</span><span class=\"n\">red</span><span class=\"o\">.</span><span class=\"n\">ansi_reset</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "painto.Color.console", "modulename": "painto", "qualname": "Color.console", "kind": "function", "doc": "<p>Wraps text with ANSI escape sequences to display it in this color as the foreground/text color.\nThis function also wraps the text with the reset to put the colors back to normal after the text.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>text:</strong>  The text to colorize.</li>\n<li><strong>background:</strong>  The background color to use. If not provided, the background will be left</li>\n<li>as the default console background color.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The text wrapped with ANSI escape sequences to display in this color.</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">red</span> <span class=\"o\">=</span> <span class=\"n\">Color</span><span class=\"p\">(</span><span class=\"s2\">&quot;red&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">red</span><span class=\"o\">.</span><span class=\"n\">console</span><span class=\"p\">(</span><span class=\"s2\">&quot;This text is red&quot;</span><span class=\"p\">))</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">background</span><span class=\"p\">:</span> <span class=\"n\">painto</span><span class=\"o\">.</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">Color</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "painto.Color.console_bg", "modulename": "painto", "qualname": "Color.console_bg", "kind": "function", "doc": "<p>Wraps text with ANSI escape sequences to display it with this background color.</p>\n\n<p>The text color will be automatically set to either black or white depending on\nthe background color's luminosity for best contrast.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>text:</strong>  The text to display on the colored background.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The text wrapped with ANSI escape sequences for background and foreground colors.</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">red</span> <span class=\"o\">=</span> <span class=\"n\">Color</span><span class=\"p\">(</span><span class=\"s2\">&quot;red&quot;</span><span class=\"p\">)</span> \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">red</span><span class=\"o\">.</span><span class=\"n\">console_bg</span><span class=\"p\">(</span><span class=\"s2\">&quot;This text has a red background&quot;</span><span class=\"p\">))</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "painto.Color.difference", "modulename": "painto", "qualname": "Color.difference", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">painto</span><span class=\"o\">.</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">Color</span></span><span class=\"return-annotation\">) -> <span class=\"n\">painto</span><span class=\"o\">.</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">Color</span>:</span></span>", "funcdef": "def"}, {"fullname": "painto.color_range", "modulename": "painto", "qualname": "color_range", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">painto</span><span class=\"o\">.</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">Color</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">painto</span><span class=\"o\">.</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">Color</span>,</span><span class=\"param\">\t<span class=\"n\">steps</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">inclusive</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">painto</span><span class=\"o\">.</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">Color</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "painto.random_color", "modulename": "painto", "qualname": "random_color", "kind": "function", "doc": "<p>Generates random color(s) with RGB values between 0-255.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>count (int, optional):</strong>  Number of random colors to generate. Defaults to 1.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Color: If count=1, returns a single random Color object.\n  list[Color]: If count>1, returns a list of random Color objects.</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">painto</span><span class=\"o\">.</span><span class=\"n\">random_color</span><span class=\"p\">()</span>  <span class=\"c1\"># Get a single random color</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">colors</span> <span class=\"o\">=</span> <span class=\"n\">painto</span><span class=\"o\">.</span><span class=\"n\">random_color</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>  <span class=\"c1\"># Get 5 random colors</span>\n</code></pre>\n  </div>\n</blockquote>\n\n<p>If you're wanting a random color or colors from a specific color list,\nsee <code>ColorList.random()</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">count</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">painto</span><span class=\"o\">.</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">Color</span> <span class=\"o\">|</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">painto</span><span class=\"o\">.</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">Color</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "painto.sort_by_hue", "modulename": "painto", "qualname": "sort_by_hue", "kind": "function", "doc": "<p>Sets the global color sorting method to sort by hue.</p>\n\n<p>This function changes the global sorting option to sort colors by their hue\n(rainbow) order. The default is to sort by luminosity/brightness. To change\nback to sorting by luminosity, call <code>sort_by_luminosity()</code>.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "painto.sort_by_luminosity", "modulename": "painto", "qualname": "sort_by_luminosity", "kind": "function", "doc": "<p>Sets the global color sorting method to sort by luminosity/brightness.</p>\n\n<p>This function changes the global sorting option to sort colors by their\nluminosity value. This is the default sorting method.</p>\n\n<p>You can change to sort by hue (rainbow) by calling <code>sort_by_hue()</code>.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "painto.sorting_by", "modulename": "painto", "qualname": "sorting_by", "kind": "function", "doc": "<p>Gets the current global color sorting method.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The name of the current sorting method ('hue' or 'luminosity')</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "painto.dynamic_name_lookup", "modulename": "painto", "qualname": "dynamic_name_lookup", "kind": "function", "doc": "<p>Sets whether dynamic name lookup is enabled.</p>\n\n<p>When dynamic name lookup is enabled, if a color's name isn't known when\nusing color.name, it will be looked up using the color.pizza API. With this\ndisabled (the default), the name will return as the hex value. This uses\nthe <code>name_lookup()</code> function and will raise an ImportError if the\nrequests library is not installed.</p>\n\n<h6 id=\"note\">Note:</h6>\n\n<blockquote>\n  <p>Use this with care. It will slow any access to color.name that isn't known\n  and cached.</p>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lookup (bool, optional):</strong>  Whether to enable dynamic name lookup. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">new_color</span> <span class=\"o\">=</span> <span class=\"n\">painto</span><span class=\"o\">.</span><span class=\"n\">Color</span><span class=\"p\">(</span><span class=\"s2\">&quot;#946A87&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">new_color</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>  <span class=\"c1\"># &#39;#946A87&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">painto</span><span class=\"o\">.</span><span class=\"n\">dynamic_name_lookup</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">new_color</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>  <span class=\"c1\"># &#39;Fruit of Passion&#39;</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lookup</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "painto.dynamic_name_lookup_enabled", "modulename": "painto", "qualname": "dynamic_name_lookup_enabled", "kind": "function", "doc": "<p>Returns whether dynamic name lookup is currently enabled. Change this\nwith <code>dynamic_name_lookup()</code>.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if dynamic name lookup is enabled, False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "painto.base_colors", "modulename": "painto", "qualname": "base_colors", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;black&#x27;: Color(r=0, g=0, b=0, a=255), &#x27;white&#x27;: Color(r=255, g=255, b=255, a=255), &#x27;red&#x27;: Color(r=255, g=0, b=0, a=255), &#x27;green&#x27;: Color(r=0, g=255, b=0, a=255), &#x27;blue&#x27;: Color(r=0, g=0, b=255, a=255), &#x27;yellow&#x27;: Color(r=255, g=255, b=0, a=255), &#x27;cyan&#x27;: Color(r=0, g=255, b=255, a=255), &#x27;magenta&#x27;: Color(r=255, g=0, b=255, a=255)}"}, {"fullname": "painto.pride", "modulename": "painto", "qualname": "pride", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;red&#x27;: Color(r=228, g=3, b=3, a=255), &#x27;orange&#x27;: Color(r=255, g=140, b=0, a=255), &#x27;yellow&#x27;: Color(r=255, g=237, b=0, a=255), &#x27;green&#x27;: Color(r=0, g=128, b=38, a=255), &#x27;blue&#x27;: Color(r=0, g=68, b=255, a=255), &#x27;purple&#x27;: Color(r=115, g=41, b=130, a=255)}"}, {"fullname": "painto.transparent", "modulename": "painto", "qualname": "transparent", "kind": "variable", "doc": "<p></p>\n", "default_value": "Color(r=0, g=0, b=0, a=0)"}, {"fullname": "painto.w3c", "modulename": "painto", "qualname": "w3c", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;aliceblue&#x27;: Color(r=240, g=248, b=255, a=255), &#x27;antiquewhite&#x27;: Color(r=250, g=235, b=215, a=255), &#x27;aqua&#x27;: Color(r=0, g=255, b=255, a=255), &#x27;aquitaine&#x27;: Color(r=138, g=172, b=184, a=255), &#x27;aquamarine&#x27;: Color(r=127, g=255, b=212, a=255), &#x27;archaeologicalsite&#x27;: Color(r=141, g=117, b=86, a=255), &#x27;azure&#x27;: Color(r=240, g=255, b=255, a=255), &#x27;azureradiance&#x27;: Color(r=0, g=128, b=38, a=255), &#x27;barbados&#x27;: Color(r=68, g=104, b=120, a=255), &#x27;beige&#x27;: Color(r=245, g=245, b=220, a=255), &#x27;bisque&#x27;: Color(r=255, g=228, b=196, a=255), &#x27;black&#x27;: Color(r=0, g=0, b=0, a=255), &#x27;blanchedalmond&#x27;: Color(r=255, g=235, b=205, a=255), &#x27;blue&#x27;: Color(r=0, g=0, b=255, a=255), &#x27;bluemoonbay&#x27;: Color(r=86, g=131, b=150, a=255), &#x27;blueviolet&#x27;: Color(r=138, g=43, b=226, a=255), &#x27;bowsershell&#x27;: Color(r=78, g=104, b=25, a=255), &#x27;brown&#x27;: Color(r=165, g=42, b=42, a=255), &#x27;burlywood&#x27;: Color(r=222, g=184, b=135, a=255), &#x27;cadetblue&#x27;: Color(r=95, g=158, b=160, a=255), &#x27;caramelgold&#x27;: Color(r=177, g=147, b=108, a=255), &#x27;chartreuse&#x27;: Color(r=127, g=255, b=0, a=255), &#x27;chocolate&#x27;: Color(r=210, g=105, b=30, a=255), &#x27;coral&#x27;: Color(r=255, g=127, b=80, a=255), &#x27;cornflowerblue&#x27;: Color(r=100, g=149, b=237, a=255), &#x27;cornsilk&#x27;: Color(r=255, g=248, b=220, a=255), &#x27;crimson&#x27;: Color(r=220, g=20, b=60, a=255), &#x27;cyan&#x27;: Color(r=0, g=255, b=255, a=255), &#x27;darkblue&#x27;: Color(r=0, g=0, b=139, a=255), &#x27;darkcyan&#x27;: Color(r=0, g=139, b=139, a=255), &#x27;darkgoldenrod&#x27;: Color(r=184, g=134, b=11, a=255), &#x27;darkgray&#x27;: Color(r=169, g=169, b=169, a=255), &#x27;darkgreen&#x27;: Color(r=0, g=100, b=0, a=255), &#x27;darkgrey&#x27;: Color(r=169, g=169, b=169, a=255), &#x27;darkkhaki&#x27;: Color(r=189, g=183, b=107, a=255), &#x27;darkmagenta&#x27;: Color(r=139, g=0, b=139, a=255), &#x27;darkolivegreen&#x27;: Color(r=85, g=107, b=47, a=255), &#x27;darkorange&#x27;: Color(r=255, g=140, b=0, a=255), &#x27;darkorchid&#x27;: Color(r=153, g=50, b=204, a=255), &#x27;darkred&#x27;: Color(r=139, g=0, b=0, a=255), &#x27;darksalmon&#x27;: Color(r=233, g=150, b=122, a=255), &#x27;darkseagreen&#x27;: Color(r=143, g=188, b=143, a=255), &#x27;darkslateblue&#x27;: Color(r=72, g=61, b=139, a=255), &#x27;darkslategray&#x27;: Color(r=47, g=79, b=79, a=255), &#x27;darkturquoise&#x27;: Color(r=0, g=206, b=209, a=255), &#x27;darkviolet&#x27;: Color(r=148, g=0, b=211, a=255), &#x27;deeppink&#x27;: Color(r=255, g=20, b=147, a=255), &#x27;deepskyblue&#x27;: Color(r=0, g=191, b=255, a=255), &#x27;dimgrey&#x27;: Color(r=105, g=105, b=105, a=255), &#x27;dodgerblue&#x27;: Color(r=30, g=144, b=255, a=255), &#x27;enchantedforest&#x27;: Color(r=98, g=131, b=32, a=255), &#x27;firebrick&#x27;: Color(r=178, g=34, b=34, a=255), &#x27;floralwhite&#x27;: Color(r=255, g=250, b=240, a=255), &#x27;forestgreen&#x27;: Color(r=34, g=139, b=34, a=255), &#x27;fuchsia&#x27;: Color(r=255, g=0, b=255, a=255), &#x27;gainsboro&#x27;: Color(r=220, g=220, b=220, a=255), &#x27;ghostwhite&#x27;: Color(r=248, g=248, b=255, a=255), &#x27;gold&#x27;: Color(r=255, g=215, b=0, a=255), &#x27;goldenrod&#x27;: Color(r=218, g=165, b=32, a=255), &#x27;gray&#x27;: Color(r=128, g=128, b=128, a=255), &#x27;green&#x27;: Color(r=0, g=128, b=0, a=255), &#x27;greenyellow&#x27;: Color(r=173, g=255, b=47, a=255), &#x27;grey&#x27;: Color(r=128, g=128, b=128, a=255), &#x27;honeydew&#x27;: Color(r=240, g=255, b=240, a=255), &#x27;hotpink&#x27;: Color(r=255, g=105, b=180, a=255), &#x27;indianred&#x27;: Color(r=205, g=92, b=92, a=255), &#x27;indigo&#x27;: Color(r=75, g=0, b=130, a=255), &#x27;ivory&#x27;: Color(r=255, g=255, b=240, a=255), &#x27;jeansindigo&#x27;: Color(r=110, g=137, b=147, a=255), &#x27;khaki&#x27;: Color(r=240, g=230, b=140, a=255), &#x27;lavender&#x27;: Color(r=230, g=230, b=250, a=255), &#x27;lavenderblush&#x27;: Color(r=255, g=240, b=245, a=255), &#x27;lawngreen&#x27;: Color(r=124, g=252, b=0, a=255), &#x27;lemonchiffon&#x27;: Color(r=255, g=250, b=205, a=255), &#x27;lightblue&#x27;: Color(r=173, g=216, b=230, a=255), &#x27;lightcoral&#x27;: Color(r=240, g=128, b=128, a=255), &#x27;lightcyan&#x27;: Color(r=224, g=255, b=255, a=255), &#x27;lightgoldenrodyellow&#x27;: Color(r=250, g=250, b=210, a=255), &#x27;lightgray&#x27;: Color(r=211, g=211, b=211, a=255), &#x27;lightgreen&#x27;: Color(r=144, g=238, b=144, a=255), &#x27;lightgrey&#x27;: Color(r=211, g=211, b=211, a=255), &#x27;lightpink&#x27;: Color(r=255, g=182, b=193, a=255), &#x27;littleredcorvette&#x27;: Color(r=228, g=3, b=3, a=255), &#x27;lightsalmon&#x27;: Color(r=255, g=160, b=122, a=255), &#x27;lightseagreen&#x27;: Color(r=32, g=178, b=170, a=255), &#x27;lightskyblue&#x27;: Color(r=135, g=206, b=250, a=255), &#x27;lightslategrey&#x27;: Color(r=119, g=136, b=153, a=255), &#x27;lightsteelblue&#x27;: Color(r=176, g=196, b=222, a=255), &#x27;lightyellow&#x27;: Color(r=255, g=255, b=224, a=255), &#x27;lime&#x27;: Color(r=0, g=255, b=0, a=255), &#x27;limegreen&#x27;: Color(r=50, g=205, b=50, a=255), &#x27;linen&#x27;: Color(r=250, g=240, b=230, a=255), &#x27;magenta&#x27;: Color(r=255, g=0, b=255, a=255), &#x27;magicink&#x27;: Color(r=0, g=76, b=255, a=255), &#x27;maroon&#x27;: Color(r=128, g=0, b=0, a=255), &#x27;maximumpurple&#x27;: Color(r=115, g=41, b=130, a=255), &#x27;mediumaquamarine&#x27;: Color(r=102, g=205, b=170, a=255), &#x27;mediumblue&#x27;: Color(r=0, g=0, b=205, a=255), &#x27;mediumorchid&#x27;: Color(r=186, g=85, b=211, a=255), &#x27;mediumpurple&#x27;: Color(r=147, g=112, b=219, a=255), &#x27;mediumseagreen&#x27;: Color(r=60, g=179, b=113, a=255), &#x27;mediumslateblue&#x27;: Color(r=123, g=104, b=238, a=255), &#x27;mediumspringgreen&#x27;: Color(r=0, g=250, b=154, a=255), &#x27;mediumturquoise&#x27;: Color(r=72, g=209, b=204, a=255), &#x27;mediumvioletred&#x27;: Color(r=199, g=21, b=133, a=255), &#x27;midnightblue&#x27;: Color(r=25, g=25, b=112, a=255), &#x27;midnightbrown&#x27;: Color(r=112, g=93, b=68, a=255), &#x27;mintcream&#x27;: Color(r=245, g=255, b=250, a=255), &#x27;mistyrose&#x27;: Color(r=255, g=228, b=225, a=255), &#x27;moccasin&#x27;: Color(r=255, g=228, b=181, a=255), &#x27;moodyblues&#x27;: Color(r=88, g=109, b=117, a=255), &#x27;navajowhite&#x27;: Color(r=255, g=222, b=173, a=255), &#x27;navy&#x27;: Color(r=0, g=0, b=128, a=255), &#x27;oldlace&#x27;: Color(r=253, g=245, b=230, a=255), &#x27;olive&#x27;: Color(r=128, g=128, b=0, a=255), &#x27;olivedrab&#x27;: Color(r=107, g=142, b=35, a=255), &#x27;orange&#x27;: Color(r=255, g=165, b=0, a=255), &#x27;orangered&#x27;: Color(r=255, g=69, b=0, a=255), &#x27;orchid&#x27;: Color(r=218, g=112, b=214, a=255), &#x27;pacificpalisade&#x27;: Color(r=108, g=164, b=188, a=255), &#x27;palegoldenrod&#x27;: Color(r=238, g=232, b=170, a=255), &#x27;palegreen&#x27;: Color(r=152, g=251, b=152, a=255), &#x27;paleturquoise&#x27;: Color(r=175, g=238, b=238, a=255), &#x27;palevioletred&#x27;: Color(r=219, g=112, b=147, a=255), &#x27;papayawhip&#x27;: Color(r=255, g=239, b=213, a=255), &#x27;peachpuff&#x27;: Color(r=255, g=218, b=185, a=255), &#x27;peru&#x27;: Color(r=205, g=133, b=63, a=255), &#x27;pink&#x27;: Color(r=255, g=192, b=203, a=255), &#x27;plum&#x27;: Color(r=221, g=0, b=221, a=255), &#x27;postyellow&#x27;: Color(r=255, g=237, b=0, a=255), &#x27;powderblue&#x27;: Color(r=176, g=224, b=230, a=255), &#x27;purple&#x27;: Color(r=128, g=0, b=128, a=255), &#x27;rebeccapurple&#x27;: Color(r=102, g=51, b=153, a=255), &#x27;red&#x27;: Color(r=255, g=0, b=0, a=255), &#x27;rosybrown&#x27;: Color(r=188, g=143, b=143, a=255), &#x27;royalblue&#x27;: Color(r=65, g=105, b=225, a=255), &#x27;saddlebrown&#x27;: Color(r=139, g=69, b=19, a=255), &#x27;salmon&#x27;: Color(r=250, g=128, b=114, a=255), &#x27;sandybrown&#x27;: Color(r=244, g=164, b=96, a=255), &#x27;seagreen&#x27;: Color(r=46, g=139, b=87, a=255), &#x27;seashell&#x27;: Color(r=255, g=245, b=238, a=255), &#x27;sidewalkgray&#x27;: Color(r=123, g=135, b=153, a=255), &#x27;sienna&#x27;: Color(r=160, g=82, b=45, a=255), &#x27;silver&#x27;: Color(r=192, g=192, b=192, a=255), &#x27;skyblue&#x27;: Color(r=135, g=206, b=235, a=255), &#x27;slateblue&#x27;: Color(r=106, g=90, b=205, a=255), &#x27;slategray&#x27;: Color(r=112, g=128, b=144, a=255), &#x27;snow&#x27;: Color(r=255, g=250, b=250, a=255), &#x27;springgreen&#x27;: Color(r=0, g=255, b=127, a=255), &#x27;steelblue&#x27;: Color(r=70, g=130, b=180, a=255), &#x27;sushi&#x27;: Color(r=123, g=164, b=40, a=255), &#x27;tan&#x27;: Color(r=210, g=180, b=140, a=255), &#x27;teal&#x27;: Color(r=0, g=128, b=128, a=255), &#x27;thistle&#x27;: Color(r=216, g=191, b=216, a=255), &#x27;tomato&#x27;: Color(r=255, g=99, b=71, a=255), &#x27;turquoise&#x27;: Color(r=64, g=224, b=208, a=255), &#x27;violet&#x27;: Color(r=238, g=130, b=238, a=255), &#x27;wheat&#x27;: Color(r=245, g=222, b=179, a=255), &#x27;white&#x27;: Color(r=255, g=255, b=255, a=255), &#x27;whitesmoke&#x27;: Color(r=245, g=245, b=245, a=255), &#x27;woodcharcoal&#x27;: Color(r=71, g=71, b=71, a=255), &#x27;yellow&#x27;: Color(r=255, g=255, b=0, a=255), &#x27;yellowgreen&#x27;: Color(r=154, g=205, b=50, a=255)}"}, {"fullname": "painto.xkcd", "modulename": "painto", "qualname": "xkcd", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;acidgreen&#x27;: Color(r=143, g=254, b=9, a=255), &#x27;adobe&#x27;: Color(r=189, g=108, b=72, a=255), &#x27;algae&#x27;: Color(r=84, g=172, b=104, a=255), &#x27;algaegreen&#x27;: Color(r=33, g=195, b=111, a=255), &#x27;almostblack&#x27;: Color(r=7, g=13, b=13, a=255), &#x27;amber&#x27;: Color(r=254, g=179, b=8, a=255), &#x27;amethyst&#x27;: Color(r=155, g=95, b=192, a=255), &#x27;apple&#x27;: Color(r=110, g=203, b=60, a=255), &#x27;applegreen&#x27;: Color(r=118, g=205, b=38, a=255), &#x27;apricot&#x27;: Color(r=255, g=177, b=109, a=255), &#x27;aqua&#x27;: Color(r=19, g=234, b=201, a=255), &#x27;aquablue&#x27;: Color(r=2, g=216, b=233, a=255), &#x27;aquagreen&#x27;: Color(r=18, g=225, b=147, a=255), &#x27;aquamarine&#x27;: Color(r=46, g=232, b=187, a=255), &#x27;aquamarine2&#x27;: Color(r=4, g=216, b=178, a=255), &#x27;armygreen&#x27;: Color(r=75, g=93, b=22, a=255), &#x27;asparagus&#x27;: Color(r=119, g=171, b=86, a=255), &#x27;aubergine&#x27;: Color(r=61, g=7, b=52, a=255), &#x27;auburn&#x27;: Color(r=154, g=48, b=1, a=255), &#x27;avocado&#x27;: Color(r=144, g=177, b=52, a=255), &#x27;avocadogreen&#x27;: Color(r=135, g=169, b=34, a=255), &#x27;azul&#x27;: Color(r=29, g=93, b=236, a=255), &#x27;azure&#x27;: Color(r=6, g=154, b=243, a=255), &#x27;babyblue&#x27;: Color(r=162, g=207, b=254, a=255), &#x27;babygreen&#x27;: Color(r=140, g=255, b=158, a=255), &#x27;babypink&#x27;: Color(r=255, g=183, b=206, a=255), &#x27;babypoo&#x27;: Color(r=171, g=144, b=4, a=255), &#x27;babypoop&#x27;: Color(r=147, g=124, b=0, a=255), &#x27;babypoopgreen&#x27;: Color(r=143, g=152, b=5, a=255), &#x27;babypukegreen&#x27;: Color(r=182, g=196, b=6, a=255), &#x27;babypurple&#x27;: Color(r=202, g=155, b=247, a=255), &#x27;babyshitbrown&#x27;: Color(r=173, g=144, b=13, a=255), &#x27;babyshitgreen&#x27;: Color(r=136, g=151, b=23, a=255), &#x27;banana&#x27;: Color(r=255, g=255, b=126, a=255), &#x27;bananayellow&#x27;: Color(r=250, g=254, b=75, a=255), &#x27;barbiepink&#x27;: Color(r=254, g=70, b=165, a=255), &#x27;barfgreen&#x27;: Color(r=148, g=172, b=2, a=255), &#x27;barney&#x27;: Color(r=172, g=29, b=184, a=255), &#x27;barneypurple&#x27;: Color(r=160, g=4, b=152, a=255), &#x27;battleshipgrey&#x27;: Color(r=107, g=124, b=133, a=255), &#x27;beige&#x27;: Color(r=230, g=218, b=166, a=255), &#x27;berry&#x27;: Color(r=153, g=15, b=75, a=255), &#x27;bile&#x27;: Color(r=181, g=195, b=6, a=255), &#x27;black&#x27;: Color(r=0, g=0, b=0, a=255), &#x27;bland&#x27;: Color(r=175, g=168, b=139, a=255), &#x27;blood&#x27;: Color(r=119, g=0, b=1, a=255), &#x27;bloodorange&#x27;: Color(r=254, g=75, b=3, a=255), &#x27;bloodred&#x27;: Color(r=152, g=0, b=2, a=255), &#x27;blue&#x27;: Color(r=3, g=67, b=223, a=255), &#x27;blueberry&#x27;: Color(r=70, g=65, b=150, a=255), &#x27;blueblue&#x27;: Color(r=34, g=66, b=199, a=255), &#x27;bluegreen&#x27;: Color(r=15, g=155, b=142, a=255), &#x27;bluegreen2&#x27;: Color(r=1, g=122, b=121, a=255), &#x27;bluegreen3&#x27;: Color(r=19, g=126, b=109, a=255), &#x27;bluegrey&#x27;: Color(r=133, g=163, b=178, a=255), &#x27;bluegrey2&#x27;: Color(r=117, g=141, b=163, a=255), &#x27;bluegrey3&#x27;: Color(r=96, g=124, b=142, a=255), &#x27;bluepurple&#x27;: Color(r=90, g=6, b=239, a=255), &#x27;bluepurple2&#x27;: Color(r=87, g=41, b=206, a=255), &#x27;blueviolet&#x27;: Color(r=93, g=6, b=233, a=255), &#x27;bluewithahintofpurple&#x27;: Color(r=83, g=60, b=198, a=255), &#x27;blueygreen&#x27;: Color(r=43, g=177, b=121, a=255), &#x27;blueygrey&#x27;: Color(r=137, g=160, b=176, a=255), &#x27;blueypurple&#x27;: Color(r=98, g=65, b=199, a=255), &#x27;bluish&#x27;: Color(r=41, g=118, b=187, a=255), &#x27;bluishgreen&#x27;: Color(r=16, g=166, b=116, a=255), &#x27;bluishgrey&#x27;: Color(r=116, g=139, b=151, a=255), &#x27;bluishpurple&#x27;: Color(r=112, g=59, b=231, a=255), &#x27;blurple&#x27;: Color(r=85, g=57, b=204, a=255), &#x27;blush&#x27;: Color(r=242, g=158, b=142, a=255), &#x27;blushpink&#x27;: Color(r=254, g=130, b=140, a=255), &#x27;booger&#x27;: Color(r=155, g=181, b=60, a=255), &#x27;boogergreen&#x27;: Color(r=150, g=180, b=3, a=255), &#x27;bordeaux&#x27;: Color(r=123, g=0, b=44, a=255), &#x27;boringgreen&#x27;: Color(r=99, g=179, b=101, a=255), &#x27;bottlegreen&#x27;: Color(r=4, g=74, b=5, a=255), &#x27;brick&#x27;: Color(r=160, g=54, b=35, a=255), &#x27;brickorange&#x27;: Color(r=193, g=74, b=9, a=255), &#x27;brickred&#x27;: Color(r=143, g=20, b=2, a=255), &#x27;brightaqua&#x27;: Color(r=11, g=249, b=234, a=255), &#x27;brightblue&#x27;: Color(r=1, g=101, b=252, a=255), &#x27;brightcyan&#x27;: Color(r=65, g=253, b=254, a=255), &#x27;brightgreen&#x27;: Color(r=1, g=255, b=7, a=255), &#x27;brightlavender&#x27;: Color(r=199, g=96, b=255, a=255), &#x27;brightlightblue&#x27;: Color(r=38, g=247, b=253, a=255), &#x27;brightlightgreen&#x27;: Color(r=45, g=254, b=84, a=255), &#x27;brightlilac&#x27;: Color(r=201, g=94, b=251, a=255), &#x27;brightlime&#x27;: Color(r=135, g=253, b=5, a=255), &#x27;brightlimegreen&#x27;: Color(r=101, g=254, b=8, a=255), &#x27;brightmagenta&#x27;: Color(r=255, g=8, b=232, a=255), &#x27;brightolive&#x27;: Color(r=156, g=187, b=4, a=255), &#x27;brightorange&#x27;: Color(r=255, g=91, b=0, a=255), &#x27;brightpink&#x27;: Color(r=254, g=1, b=177, a=255), &#x27;brightpurple&#x27;: Color(r=190, g=3, b=253, a=255), &#x27;brightred&#x27;: Color(r=255, g=0, b=13, a=255), &#x27;brightseagreen&#x27;: Color(r=5, g=255, b=166, a=255), &#x27;brightskyblue&#x27;: Color(r=2, g=204, b=254, a=255), &#x27;brightteal&#x27;: Color(r=1, g=249, b=198, a=255), &#x27;brightturquoise&#x27;: Color(r=15, g=254, b=249, a=255), &#x27;brightviolet&#x27;: Color(r=173, g=10, b=253, a=255), &#x27;brightyellow&#x27;: Color(r=255, g=253, b=1, a=255), &#x27;brightyellowgreen&#x27;: Color(r=157, g=255, b=0, a=255), &#x27;britishracinggreen&#x27;: Color(r=5, g=72, b=13, a=255), &#x27;bronze&#x27;: Color(r=168, g=121, b=0, a=255), &#x27;brown&#x27;: Color(r=101, g=55, b=0, a=255), &#x27;browngreen&#x27;: Color(r=112, g=108, b=17, a=255), &#x27;browngrey&#x27;: Color(r=141, g=132, b=104, a=255), &#x27;brownish&#x27;: Color(r=156, g=109, b=87, a=255), &#x27;brownishgreen&#x27;: Color(r=106, g=110, b=9, a=255), &#x27;brownishgrey&#x27;: Color(r=134, g=119, b=95, a=255), &#x27;brownishorange&#x27;: Color(r=203, g=119, b=35, a=255), &#x27;brownishpink&#x27;: Color(r=194, g=126, b=121, a=255), &#x27;brownishpurple&#x27;: Color(r=118, g=66, b=78, a=255), &#x27;brownishred&#x27;: Color(r=158, g=54, b=35, a=255), &#x27;brownishyellow&#x27;: Color(r=201, g=176, b=3, a=255), &#x27;brownorange&#x27;: Color(r=185, g=105, b=2, a=255), &#x27;brownred&#x27;: Color(r=146, g=43, b=5, a=255), &#x27;brownyellow&#x27;: Color(r=178, g=151, b=5, a=255), &#x27;brownygreen&#x27;: Color(r=111, g=108, b=10, a=255), &#x27;brownyorange&#x27;: Color(r=202, g=107, b=2, a=255), &#x27;bruise&#x27;: Color(r=126, g=64, b=113, a=255), &#x27;bubblegum&#x27;: Color(r=255, g=108, b=181, a=255), &#x27;bubblegumpink&#x27;: Color(r=255, g=105, b=175, a=255), &#x27;bubblegumpink2&#x27;: Color(r=254, g=131, b=204, a=255), &#x27;buff&#x27;: Color(r=254, g=246, b=158, a=255), &#x27;burgundy&#x27;: Color(r=97, g=0, b=35, a=255), &#x27;burntorange&#x27;: Color(r=192, g=78, b=1, a=255), &#x27;burntred&#x27;: Color(r=159, g=35, b=5, a=255), &#x27;burntsiena&#x27;: Color(r=183, g=82, b=3, a=255), &#x27;burntsienna&#x27;: Color(r=176, g=78, b=15, a=255), &#x27;burntumber&#x27;: Color(r=160, g=69, b=14, a=255), &#x27;burntyellow&#x27;: Color(r=213, g=171, b=9, a=255), &#x27;burple&#x27;: Color(r=104, g=50, b=227, a=255), &#x27;butter&#x27;: Color(r=255, g=255, b=129, a=255), &#x27;butterscotch&#x27;: Color(r=253, g=177, b=71, a=255), &#x27;butteryellow&#x27;: Color(r=255, g=253, b=116, a=255), &#x27;cadetblue&#x27;: Color(r=78, g=116, b=150, a=255), &#x27;camel&#x27;: Color(r=198, g=159, b=89, a=255), &#x27;camo&#x27;: Color(r=127, g=143, b=78, a=255), &#x27;camogreen&#x27;: Color(r=82, g=101, b=37, a=255), &#x27;camouflagegreen&#x27;: Color(r=75, g=97, b=19, a=255), &#x27;canary&#x27;: Color(r=253, g=255, b=99, a=255), &#x27;canaryyellow&#x27;: Color(r=255, g=254, b=64, a=255), &#x27;candypink&#x27;: Color(r=255, g=99, b=233, a=255), &#x27;caramel&#x27;: Color(r=175, g=111, b=9, a=255), &#x27;carmine&#x27;: Color(r=157, g=2, b=22, a=255), &#x27;carnation&#x27;: Color(r=253, g=121, b=143, a=255), &#x27;carnationpink&#x27;: Color(r=255, g=127, b=167, a=255), &#x27;carolinablue&#x27;: Color(r=138, g=184, b=254, a=255), &#x27;celadon&#x27;: Color(r=190, g=253, b=183, a=255), &#x27;celery&#x27;: Color(r=193, g=253, b=149, a=255), &#x27;cement&#x27;: Color(r=165, g=163, b=145, a=255), &#x27;cerise&#x27;: Color(r=222, g=12, b=98, a=255), &#x27;cerulean&#x27;: Color(r=4, g=133, b=209, a=255), &#x27;ceruleanblue&#x27;: Color(r=5, g=110, b=238, a=255), &#x27;charcoal&#x27;: Color(r=52, g=56, b=55, a=255), &#x27;charcoalgrey&#x27;: Color(r=60, g=65, b=66, a=255), &#x27;chartreuse&#x27;: Color(r=193, g=248, b=10, a=255), &#x27;cherry&#x27;: Color(r=207, g=2, b=52, a=255), &#x27;cherryred&#x27;: Color(r=247, g=2, b=42, a=255), &#x27;chestnut&#x27;: Color(r=116, g=40, b=2, a=255), &#x27;chocolate&#x27;: Color(r=61, g=28, b=2, a=255), &#x27;chocolatebrown&#x27;: Color(r=65, g=25, b=0, a=255), &#x27;cinnamon&#x27;: Color(r=172, g=79, b=6, a=255), &#x27;claret&#x27;: Color(r=104, g=0, b=24, a=255), &#x27;clay&#x27;: Color(r=182, g=106, b=80, a=255), &#x27;claybrown&#x27;: Color(r=178, g=113, b=61, a=255), &#x27;clearblue&#x27;: Color(r=36, g=122, b=253, a=255), &#x27;cloudyblue&#x27;: Color(r=172, g=194, b=217, a=255), &#x27;cobalt&#x27;: Color(r=30, g=72, b=143, a=255), &#x27;cobaltblue&#x27;: Color(r=3, g=10, b=167, a=255), &#x27;cocoa&#x27;: Color(r=135, g=95, b=66, a=255), &#x27;coffee&#x27;: Color(r=166, g=129, b=76, a=255), &#x27;coolblue&#x27;: Color(r=73, g=132, b=184, a=255), &#x27;coolgreen&#x27;: Color(r=51, g=184, b=100, a=255), &#x27;coolgrey&#x27;: Color(r=149, g=163, b=166, a=255), &#x27;copper&#x27;: Color(r=182, g=99, b=37, a=255), &#x27;coral&#x27;: Color(r=252, g=90, b=80, a=255), &#x27;coralpink&#x27;: Color(r=255, g=97, b=99, a=255), &#x27;cornflower&#x27;: Color(r=106, g=121, b=247, a=255), &#x27;cornflowerblue&#x27;: Color(r=81, g=112, b=215, a=255), &#x27;cranberry&#x27;: Color(r=158, g=0, b=58, a=255), &#x27;cream&#x27;: Color(r=255, g=255, b=194, a=255), &#x27;creme&#x27;: Color(r=255, g=255, b=182, a=255), &#x27;crimson&#x27;: Color(r=140, g=0, b=15, a=255), &#x27;custard&#x27;: Color(r=255, g=253, b=120, a=255), &#x27;cyan&#x27;: Color(r=0, g=255, b=255, a=255), &#x27;dandelion&#x27;: Color(r=254, g=223, b=8, a=255), &#x27;dark&#x27;: Color(r=27, g=36, b=49, a=255), &#x27;darkaqua&#x27;: Color(r=5, g=105, b=107, a=255), &#x27;darkaquamarine&#x27;: Color(r=1, g=115, b=113, a=255), &#x27;darkbeige&#x27;: Color(r=172, g=147, b=98, a=255), &#x27;darkblue&#x27;: Color(r=3, g=7, b=100, a=255), &#x27;darkblue2&#x27;: Color(r=0, g=3, b=91, a=255), &#x27;darkbluegreen&#x27;: Color(r=0, g=82, b=73, a=255), &#x27;darkbluegrey&#x27;: Color(r=31, g=59, b=77, a=255), &#x27;darkbrown&#x27;: Color(r=52, g=28, b=2, a=255), &#x27;darkcoral&#x27;: Color(r=207, g=82, b=78, a=255), &#x27;darkcream&#x27;: Color(r=255, g=243, b=154, a=255), &#x27;darkcyan&#x27;: Color(r=10, g=136, b=138, a=255), &#x27;darkforestgreen&#x27;: Color(r=0, g=45, b=4, a=255), &#x27;darkfuchsia&#x27;: Color(r=157, g=7, b=89, a=255), &#x27;darkgold&#x27;: Color(r=181, g=148, b=16, a=255), &#x27;darkgrassgreen&#x27;: Color(r=56, g=128, b=4, a=255), &#x27;darkgreen&#x27;: Color(r=5, g=73, b=7, a=255), &#x27;darkgreen2&#x27;: Color(r=3, g=53, b=0, a=255), &#x27;darkgreenblue&#x27;: Color(r=31, g=99, b=87, a=255), &#x27;darkgrey&#x27;: Color(r=54, g=55, b=55, a=255), &#x27;darkgreyblue&#x27;: Color(r=41, g=70, b=91, a=255), &#x27;darkhotpink&#x27;: Color(r=217, g=1, b=102, a=255), &#x27;darkindigo&#x27;: Color(r=31, g=9, b=84, a=255), &#x27;darkishblue&#x27;: Color(r=1, g=65, b=130, a=255), &#x27;darkishgreen&#x27;: Color(r=40, g=124, b=55, a=255), &#x27;darkishpink&#x27;: Color(r=218, g=70, b=125, a=255), &#x27;darkishpurple&#x27;: Color(r=117, g=25, b=115, a=255), &#x27;darkishred&#x27;: Color(r=169, g=3, b=8, a=255), &#x27;darkkhaki&#x27;: Color(r=155, g=143, b=85, a=255), &#x27;darklavender&#x27;: Color(r=133, g=103, b=152, a=255), &#x27;darklilac&#x27;: Color(r=156, g=109, b=165, a=255), &#x27;darklime&#x27;: Color(r=132, g=183, b=1, a=255), &#x27;darklimegreen&#x27;: Color(r=126, g=189, b=1, a=255), &#x27;darkmagenta&#x27;: Color(r=150, g=0, b=86, a=255), &#x27;darkmaroon&#x27;: Color(r=60, g=0, b=8, a=255), &#x27;darkmauve&#x27;: Color(r=135, g=76, b=98, a=255), &#x27;darkmint&#x27;: Color(r=72, g=192, b=114, a=255), &#x27;darkmintgreen&#x27;: Color(r=32, g=192, b=115, a=255), &#x27;darkmustard&#x27;: Color(r=168, g=137, b=5, a=255), &#x27;darknavy&#x27;: Color(r=0, g=4, b=53, a=255), &#x27;darknavyblue&#x27;: Color(r=0, g=2, b=46, a=255), &#x27;darkolive&#x27;: Color(r=55, g=62, b=2, a=255), &#x27;darkolivegreen&#x27;: Color(r=60, g=77, b=3, a=255), &#x27;darkorange&#x27;: Color(r=198, g=81, b=2, a=255), &#x27;darkpastelgreen&#x27;: Color(r=86, g=174, b=87, a=255), &#x27;darkpeach&#x27;: Color(r=222, g=126, b=93, a=255), &#x27;darkperiwinkle&#x27;: Color(r=102, g=95, b=209, a=255), &#x27;darkpink&#x27;: Color(r=203, g=65, b=107, a=255), &#x27;darkplum&#x27;: Color(r=63, g=1, b=44, a=255), &#x27;darkpurple&#x27;: Color(r=53, g=6, b=62, a=255), &#x27;darkred&#x27;: Color(r=132, g=0, b=0, a=255), &#x27;darkrose&#x27;: Color(r=181, g=72, b=93, a=255), &#x27;darkroyalblue&#x27;: Color(r=2, g=6, b=111, a=255), &#x27;darksage&#x27;: Color(r=89, g=133, b=86, a=255), &#x27;darksalmon&#x27;: Color(r=200, g=90, b=83, a=255), &#x27;darksand&#x27;: Color(r=168, g=143, b=89, a=255), &#x27;darkseafoam&#x27;: Color(r=31, g=181, b=122, a=255), &#x27;darkseafoamgreen&#x27;: Color(r=62, g=175, b=118, a=255), &#x27;darkseagreen&#x27;: Color(r=17, g=135, b=93, a=255), &#x27;darkskyblue&#x27;: Color(r=68, g=142, b=228, a=255), &#x27;darkslateblue&#x27;: Color(r=33, g=71, b=97, a=255), &#x27;darktan&#x27;: Color(r=175, g=136, b=74, a=255), &#x27;darktaupe&#x27;: Color(r=127, g=104, b=78, a=255), &#x27;darkteal&#x27;: Color(r=1, g=77, b=78, a=255), &#x27;darkturquoise&#x27;: Color(r=4, g=92, b=90, a=255), &#x27;darkviolet&#x27;: Color(r=52, g=1, b=63, a=255), &#x27;darkyellow&#x27;: Color(r=213, g=182, b=10, a=255), &#x27;darkyellowgreen&#x27;: Color(r=114, g=143, b=2, a=255), &#x27;deepaqua&#x27;: Color(r=8, g=120, b=127, a=255), &#x27;deepblue&#x27;: Color(r=4, g=2, b=115, a=255), &#x27;deepbrown&#x27;: Color(r=65, g=2, b=0, a=255), &#x27;deepgreen&#x27;: Color(r=2, g=89, b=15, a=255), &#x27;deeplavender&#x27;: Color(r=141, g=94, b=183, a=255), &#x27;deeplilac&#x27;: Color(r=150, g=110, b=189, a=255), &#x27;deepmagenta&#x27;: Color(r=160, g=2, b=92, a=255), &#x27;deeporange&#x27;: Color(r=220, g=77, b=1, a=255), &#x27;deeppink&#x27;: Color(r=203, g=1, b=98, a=255), &#x27;deeppurple&#x27;: Color(r=54, g=1, b=63, a=255), &#x27;deepred&#x27;: Color(r=154, g=2, b=0, a=255), &#x27;deeprose&#x27;: Color(r=199, g=71, b=103, a=255), &#x27;deepseablue&#x27;: Color(r=1, g=84, b=130, a=255), &#x27;deepskyblue&#x27;: Color(r=13, g=117, b=248, a=255), &#x27;deepteal&#x27;: Color(r=0, g=85, b=90, a=255), &#x27;deepturquoise&#x27;: Color(r=1, g=115, b=116, a=255), &#x27;deepviolet&#x27;: Color(r=73, g=6, b=72, a=255), &#x27;denim&#x27;: Color(r=59, g=99, b=140, a=255), &#x27;denimblue&#x27;: Color(r=59, g=91, b=146, a=255), &#x27;desert&#x27;: Color(r=204, g=173, b=96, a=255), &#x27;diarrhea&#x27;: Color(r=159, g=131, b=3, a=255), &#x27;dirt&#x27;: Color(r=138, g=110, b=69, a=255), &#x27;dirtbrown&#x27;: Color(r=131, g=101, b=57, a=255), &#x27;dirtyblue&#x27;: Color(r=63, g=130, b=157, a=255), &#x27;dirtygreen&#x27;: Color(r=102, g=126, b=44, a=255), &#x27;dirtyorange&#x27;: Color(r=200, g=118, b=6, a=255), &#x27;dirtypink&#x27;: Color(r=202, g=123, b=128, a=255), &#x27;dirtypurple&#x27;: Color(r=115, g=74, b=101, a=255), &#x27;dirtyyellow&#x27;: Color(r=205, g=197, b=10, a=255), &#x27;dodgerblue&#x27;: Color(r=62, g=130, b=252, a=255), &#x27;drab&#x27;: Color(r=130, g=131, b=68, a=255), &#x27;drabgreen&#x27;: Color(r=116, g=149, b=81, a=255), &#x27;driedblood&#x27;: Color(r=75, g=1, b=1, a=255), &#x27;duckeggblue&#x27;: Color(r=195, g=251, b=244, a=255), &#x27;dullblue&#x27;: Color(r=73, g=117, b=156, a=255), &#x27;dullbrown&#x27;: Color(r=135, g=110, b=75, a=255), &#x27;dullgreen&#x27;: Color(r=116, g=166, b=98, a=255), &#x27;dullorange&#x27;: Color(r=216, g=134, b=59, a=255), &#x27;dullpink&#x27;: Color(r=213, g=134, b=157, a=255), &#x27;dullpurple&#x27;: Color(r=132, g=89, b=126, a=255), &#x27;dullred&#x27;: Color(r=187, g=63, b=63, a=255), &#x27;dullteal&#x27;: Color(r=95, g=158, b=143, a=255), &#x27;dullyellow&#x27;: Color(r=238, g=220, b=91, a=255), &#x27;dusk&#x27;: Color(r=78, g=84, b=129, a=255), &#x27;duskblue&#x27;: Color(r=38, g=83, b=141, a=255), &#x27;duskyblue&#x27;: Color(r=71, g=95, b=148, a=255), &#x27;duskypink&#x27;: Color(r=204, g=122, b=139, a=255), &#x27;duskypurple&#x27;: Color(r=137, g=91, b=123, a=255), &#x27;duskyrose&#x27;: Color(r=186, g=104, b=115, a=255), &#x27;dust&#x27;: Color(r=178, g=153, b=110, a=255), &#x27;dustyblue&#x27;: Color(r=90, g=134, b=173, a=255), &#x27;dustygreen&#x27;: Color(r=118, g=169, b=115, a=255), &#x27;dustylavender&#x27;: Color(r=172, g=134, b=168, a=255), &#x27;dustyorange&#x27;: Color(r=240, g=131, b=58, a=255), &#x27;dustypink&#x27;: Color(r=213, g=138, b=148, a=255), &#x27;dustypurple&#x27;: Color(r=130, g=95, b=135, a=255), &#x27;dustyred&#x27;: Color(r=185, g=72, b=78, a=255), &#x27;dustyrose&#x27;: Color(r=192, g=115, b=122, a=255), &#x27;dustyteal&#x27;: Color(r=76, g=144, b=133, a=255), &#x27;earth&#x27;: Color(r=162, g=101, b=62, a=255), &#x27;eastergreen&#x27;: Color(r=140, g=253, b=126, a=255), &#x27;easterpurple&#x27;: Color(r=192, g=113, b=254, a=255), &#x27;ecru&#x27;: Color(r=254, g=255, b=202, a=255), &#x27;eggplant&#x27;: Color(r=56, g=8, b=53, a=255), &#x27;eggplantpurple&#x27;: Color(r=67, g=5, b=65, a=255), &#x27;eggshell&#x27;: Color(r=255, g=252, b=196, a=255), &#x27;eggshell2&#x27;: Color(r=255, g=255, b=212, a=255), &#x27;eggshellblue&#x27;: Color(r=196, g=255, b=247, a=255), &#x27;electricblue&#x27;: Color(r=6, g=82, b=255, a=255), &#x27;electricgreen&#x27;: Color(r=33, g=252, b=13, a=255), &#x27;electriclime&#x27;: Color(r=168, g=255, b=4, a=255), &#x27;electricpink&#x27;: Color(r=255, g=4, b=144, a=255), &#x27;electricpurple&#x27;: Color(r=170, g=35, b=255, a=255), &#x27;emerald&#x27;: Color(r=1, g=160, b=73, a=255), &#x27;emeraldgreen&#x27;: Color(r=2, g=143, b=30, a=255), &#x27;evergreen&#x27;: Color(r=5, g=71, b=42, a=255), &#x27;fadedblue&#x27;: Color(r=101, g=140, b=187, a=255), &#x27;fadedgreen&#x27;: Color(r=123, g=178, b=116, a=255), &#x27;fadedorange&#x27;: Color(r=240, g=148, b=77, a=255), &#x27;fadedpink&#x27;: Color(r=222, g=157, b=172, a=255), &#x27;fadedpurple&#x27;: Color(r=145, g=110, b=153, a=255), &#x27;fadedred&#x27;: Color(r=211, g=73, b=78, a=255), &#x27;fadedyellow&#x27;: Color(r=254, g=255, b=127, a=255), &#x27;fawn&#x27;: Color(r=207, g=175, b=123, a=255), &#x27;fern&#x27;: Color(r=99, g=169, b=80, a=255), &#x27;ferngreen&#x27;: Color(r=84, g=141, b=68, a=255), &#x27;fireenginered&#x27;: Color(r=254, g=0, b=2, a=255), &#x27;flatblue&#x27;: Color(r=60, g=115, b=168, a=255), &#x27;flatgreen&#x27;: Color(r=105, g=157, b=76, a=255), &#x27;fluorescentgreen&#x27;: Color(r=8, g=255, b=8, a=255), &#x27;flurogreen&#x27;: Color(r=10, g=255, b=2, a=255), &#x27;foamgreen&#x27;: Color(r=144, g=253, b=169, a=255), &#x27;forest&#x27;: Color(r=11, g=85, b=9, a=255), &#x27;forestgreen&#x27;: Color(r=6, g=71, b=12, a=255), &#x27;forrestgreen&#x27;: Color(r=21, g=68, b=6, a=255), &#x27;frenchblue&#x27;: Color(r=67, g=107, b=173, a=255), &#x27;freshgreen&#x27;: Color(r=105, g=216, b=79, a=255), &#x27;froggreen&#x27;: Color(r=88, g=188, b=8, a=255), &#x27;fuchsia&#x27;: Color(r=237, g=13, b=217, a=255), &#x27;gold&#x27;: Color(r=219, g=180, b=12, a=255), &#x27;golden&#x27;: Color(r=245, g=191, b=3, a=255), &#x27;goldenbrown&#x27;: Color(r=178, g=122, b=1, a=255), &#x27;goldenrod&#x27;: Color(r=249, g=188, b=8, a=255), &#x27;goldenrod2&#x27;: Color(r=250, g=194, b=5, a=255), &#x27;goldenyellow&#x27;: Color(r=254, g=198, b=21, a=255), &#x27;grape&#x27;: Color(r=108, g=52, b=97, a=255), &#x27;grapefruit&#x27;: Color(r=253, g=89, b=86, a=255), &#x27;grapepurple&#x27;: Color(r=93, g=20, b=81, a=255), &#x27;grass&#x27;: Color(r=92, g=172, b=45, a=255), &#x27;grassgreen&#x27;: Color(r=63, g=155, b=11, a=255), &#x27;grassygreen&#x27;: Color(r=65, g=156, b=3, a=255), &#x27;green&#x27;: Color(r=21, g=176, b=26, a=255), &#x27;greenapple&#x27;: Color(r=94, g=220, b=31, a=255), &#x27;greenblue&#x27;: Color(r=1, g=192, b=141, a=255), &#x27;greenblue2&#x27;: Color(r=35, g=196, b=139, a=255), &#x27;greenblue3&#x27;: Color(r=6, g=180, b=139, a=255), &#x27;greenbrown&#x27;: Color(r=84, g=78, b=3, a=255), &#x27;greengrey&#x27;: Color(r=119, g=146, b=111, a=255), &#x27;greenish&#x27;: Color(r=64, g=163, b=104, a=255), &#x27;greenishbeige&#x27;: Color(r=201, g=209, b=121, a=255), &#x27;greenishblue&#x27;: Color(r=11, g=139, b=135, a=255), &#x27;greenishbrown&#x27;: Color(r=105, g=97, b=18, a=255), &#x27;greenishcyan&#x27;: Color(r=42, g=254, b=183, a=255), &#x27;greenishgrey&#x27;: Color(r=150, g=174, b=141, a=255), &#x27;greenishtan&#x27;: Color(r=188, g=203, b=122, a=255), &#x27;greenishteal&#x27;: Color(r=50, g=191, b=132, a=255), &#x27;greenishturquoise&#x27;: Color(r=0, g=251, b=176, a=255), &#x27;greenishyellow&#x27;: Color(r=205, g=253, b=2, a=255), &#x27;greenteal&#x27;: Color(r=12, g=181, b=119, a=255), &#x27;greenyblue&#x27;: Color(r=66, g=179, b=149, a=255), &#x27;greenybrown&#x27;: Color(r=105, g=96, b=6, a=255), &#x27;greenyellow&#x27;: Color(r=181, g=206, b=8, a=255), &#x27;greenyellow2&#x27;: Color(r=201, g=255, b=39, a=255), &#x27;greenygrey&#x27;: Color(r=126, g=160, b=122, a=255), &#x27;greenyyellow&#x27;: Color(r=198, g=248, b=8, a=255), &#x27;grey&#x27;: Color(r=146, g=149, b=145, a=255), &#x27;greyblue&#x27;: Color(r=100, g=125, b=142, a=255), &#x27;greyblue2&#x27;: Color(r=119, g=161, b=181, a=255), &#x27;greyblue3&#x27;: Color(r=107, g=139, b=164, a=255), &#x27;greybrown&#x27;: Color(r=127, g=112, b=83, a=255), &#x27;greygreen&#x27;: Color(r=134, g=161, b=125, a=255), &#x27;greygreen2&#x27;: Color(r=120, g=155, b=115, a=255), &#x27;greyish&#x27;: Color(r=168, g=164, b=149, a=255), &#x27;greyishblue&#x27;: Color(r=94, g=129, b=157, a=255), &#x27;greyishbrown&#x27;: Color(r=122, g=106, b=79, a=255), &#x27;greyishgreen&#x27;: Color(r=130, g=166, b=125, a=255), &#x27;greyishpink&#x27;: Color(r=200, g=141, b=148, a=255), &#x27;greyishpurple&#x27;: Color(r=136, g=113, b=145, a=255), &#x27;greyishteal&#x27;: Color(r=113, g=159, b=145, a=255), &#x27;greypink&#x27;: Color(r=195, g=144, b=155, a=255), &#x27;greypurple&#x27;: Color(r=130, g=109, b=140, a=255), &#x27;greyteal&#x27;: Color(r=94, g=155, b=138, a=255), &#x27;grossgreen&#x27;: Color(r=160, g=191, b=22, a=255), &#x27;gunmetal&#x27;: Color(r=83, g=98, b=103, a=255), &#x27;hazel&#x27;: Color(r=142, g=118, b=24, a=255), &#x27;heather&#x27;: Color(r=164, g=132, b=172, a=255), &#x27;heliotrope&#x27;: Color(r=217, g=79, b=245, a=255), &#x27;highlightergreen&#x27;: Color(r=27, g=252, b=6, a=255), &#x27;hospitalgreen&#x27;: Color(r=155, g=229, b=170, a=255), &#x27;hotgreen&#x27;: Color(r=37, g=255, b=41, a=255), &#x27;hotmagenta&#x27;: Color(r=245, g=4, b=201, a=255), &#x27;hotpink&#x27;: Color(r=255, g=2, b=141, a=255), &#x27;hotpurple&#x27;: Color(r=203, g=0, b=245, a=255), &#x27;huntergreen&#x27;: Color(r=11, g=64, b=8, a=255), &#x27;ice&#x27;: Color(r=214, g=255, b=250, a=255), &#x27;iceblue&#x27;: Color(r=215, g=255, b=254, a=255), &#x27;ickygreen&#x27;: Color(r=143, g=174, b=34, a=255), &#x27;indianred&#x27;: Color(r=133, g=14, b=4, a=255), &#x27;indigo&#x27;: Color(r=56, g=2, b=130, a=255), &#x27;indigoblue&#x27;: Color(r=58, g=24, b=177, a=255), &#x27;iris&#x27;: Color(r=98, g=88, b=196, a=255), &#x27;irishgreen&#x27;: Color(r=1, g=149, b=41, a=255), &#x27;ivory&#x27;: Color(r=255, g=255, b=203, a=255), &#x27;jade&#x27;: Color(r=31, g=167, b=116, a=255), &#x27;jadegreen&#x27;: Color(r=43, g=175, b=106, a=255), &#x27;junglegreen&#x27;: Color(r=4, g=130, b=67, a=255), &#x27;kelleygreen&#x27;: Color(r=0, g=147, b=55, a=255), &#x27;kellygreen&#x27;: Color(r=2, g=171, b=46, a=255), &#x27;kermitgreen&#x27;: Color(r=92, g=178, b=0, a=255), &#x27;keylime&#x27;: Color(r=174, g=255, b=110, a=255), &#x27;khaki&#x27;: Color(r=170, g=166, b=98, a=255), &#x27;khakigreen&#x27;: Color(r=114, g=134, b=57, a=255), &#x27;kiwi&#x27;: Color(r=156, g=239, b=67, a=255), &#x27;kiwigreen&#x27;: Color(r=142, g=229, b=63, a=255), &#x27;lavender&#x27;: Color(r=199, g=159, b=239, a=255), &#x27;lavenderblue&#x27;: Color(r=139, g=136, b=248, a=255), &#x27;lavenderpink&#x27;: Color(r=221, g=133, b=215, a=255), &#x27;lawngreen&#x27;: Color(r=77, g=164, b=9, a=255), &#x27;leaf&#x27;: Color(r=113, g=170, b=52, a=255), &#x27;leafgreen&#x27;: Color(r=92, g=169, b=4, a=255), &#x27;leafygreen&#x27;: Color(r=81, g=183, b=59, a=255), &#x27;leather&#x27;: Color(r=172, g=116, b=52, a=255), &#x27;lemon&#x27;: Color(r=253, g=255, b=82, a=255), &#x27;lemongreen&#x27;: Color(r=173, g=248, b=2, a=255), &#x27;lemonlime&#x27;: Color(r=191, g=254, b=40, a=255), &#x27;lemonyellow&#x27;: Color(r=253, g=255, b=56, a=255), &#x27;lichen&#x27;: Color(r=143, g=182, b=123, a=255), &#x27;lightaqua&#x27;: Color(r=140, g=255, b=219, a=255), &#x27;lightaquamarine&#x27;: Color(r=123, g=253, b=199, a=255), &#x27;lightbeige&#x27;: Color(r=255, g=254, b=182, a=255), &#x27;lightblue&#x27;: Color(r=123, g=200, b=246, a=255), &#x27;lightblue2&#x27;: Color(r=149, g=208, b=252, a=255), &#x27;lightbluegreen&#x27;: Color(r=126, g=251, b=179, a=255), &#x27;lightbluegrey&#x27;: Color(r=183, g=201, b=226, a=255), &#x27;lightbluishgreen&#x27;: Color(r=118, g=253, b=168, a=255), &#x27;lightbrightgreen&#x27;: Color(r=83, g=254, b=92, a=255), &#x27;lightbrown&#x27;: Color(r=173, g=129, b=80, a=255), &#x27;lightburgundy&#x27;: Color(r=168, g=65, b=91, a=255), &#x27;lightcyan&#x27;: Color(r=172, g=255, b=252, a=255), &#x27;lighteggplant&#x27;: Color(r=137, g=69, b=133, a=255), &#x27;lightergreen&#x27;: Color(r=117, g=253, b=99, a=255), &#x27;lighterpurple&#x27;: Color(r=165, g=90, b=244, a=255), &#x27;lightforestgreen&#x27;: Color(r=79, g=145, b=83, a=255), &#x27;lightgold&#x27;: Color(r=253, g=220, b=92, a=255), &#x27;lightgrassgreen&#x27;: Color(r=154, g=247, b=100, a=255), &#x27;lightgreen&#x27;: Color(r=118, g=255, b=123, a=255), &#x27;lightgreen2&#x27;: Color(r=150, g=249, b=123, a=255), &#x27;lightgreenblue&#x27;: Color(r=86, g=252, b=162, a=255), &#x27;lightgreenishblue&#x27;: Color(r=99, g=247, b=180, a=255), &#x27;lightgrey&#x27;: Color(r=216, g=220, b=214, a=255), &#x27;lightgreyblue&#x27;: Color(r=157, g=188, b=212, a=255), &#x27;lightgreygreen&#x27;: Color(r=183, g=225, b=161, a=255), &#x27;lightindigo&#x27;: Color(r=109, g=90, b=207, a=255), &#x27;lightishblue&#x27;: Color(r=61, g=122, b=253, a=255), &#x27;lightishgreen&#x27;: Color(r=97, g=225, b=96, a=255), &#x27;lightishpurple&#x27;: Color(r=165, g=82, b=230, a=255), &#x27;lightishred&#x27;: Color(r=254, g=47, b=74, a=255), &#x27;lightkhaki&#x27;: Color(r=230, g=242, b=162, a=255), &#x27;lightlavendar&#x27;: Color(r=239, g=192, b=254, a=255), &#x27;lightlavender&#x27;: Color(r=223, g=197, b=254, a=255), &#x27;lightlightblue&#x27;: Color(r=202, g=255, b=251, a=255), &#x27;lightlightgreen&#x27;: Color(r=200, g=255, b=176, a=255), &#x27;lightlilac&#x27;: Color(r=237, g=200, b=255, a=255), &#x27;lightlime&#x27;: Color(r=174, g=253, b=108, a=255), &#x27;lightlimegreen&#x27;: Color(r=185, g=255, b=102, a=255), &#x27;lightmagenta&#x27;: Color(r=250, g=95, b=247, a=255), &#x27;lightmaroon&#x27;: Color(r=162, g=72, b=87, a=255), &#x27;lightmauve&#x27;: Color(r=194, g=146, b=161, a=255), &#x27;lightmint&#x27;: Color(r=182, g=255, b=187, a=255), &#x27;lightmintgreen&#x27;: Color(r=166, g=251, b=178, a=255), &#x27;lightmossgreen&#x27;: Color(r=166, g=200, b=117, a=255), &#x27;lightmustard&#x27;: Color(r=247, g=213, b=96, a=255), &#x27;lightnavy&#x27;: Color(r=21, g=80, b=132, a=255), &#x27;lightnavyblue&#x27;: Color(r=46, g=90, b=136, a=255), &#x27;lightneongreen&#x27;: Color(r=78, g=253, b=84, a=255), &#x27;lightolive&#x27;: Color(r=172, g=191, b=105, a=255), &#x27;lightolivegreen&#x27;: Color(r=164, g=190, b=92, a=255), &#x27;lightorange&#x27;: Color(r=253, g=170, b=72, a=255), &#x27;lightpastelgreen&#x27;: Color(r=178, g=251, b=165, a=255), &#x27;lightpeach&#x27;: Color(r=255, g=216, b=177, a=255), &#x27;lightpeagreen&#x27;: Color(r=196, g=254, b=130, a=255), &#x27;lightperiwinkle&#x27;: Color(r=193, g=198, b=252, a=255), &#x27;lightpink&#x27;: Color(r=255, g=209, b=223, a=255), &#x27;lightplum&#x27;: Color(r=157, g=87, b=131, a=255), &#x27;lightpurple&#x27;: Color(r=191, g=119, b=246, a=255), &#x27;lightred&#x27;: Color(r=255, g=71, b=76, a=255), &#x27;lightrose&#x27;: Color(r=255, g=197, b=203, a=255), &#x27;lightroyalblue&#x27;: Color(r=58, g=46, b=254, a=255), &#x27;lightsage&#x27;: Color(r=188, g=236, b=172, a=255), &#x27;lightsalmon&#x27;: Color(r=254, g=169, b=147, a=255), &#x27;lightseafoam&#x27;: Color(r=160, g=254, b=191, a=255), &#x27;lightseafoamgreen&#x27;: Color(r=167, g=255, b=181, a=255), &#x27;lightseagreen&#x27;: Color(r=152, g=246, b=176, a=255), &#x27;lightskyblue&#x27;: Color(r=198, g=252, b=255, a=255), &#x27;lighttan&#x27;: Color(r=251, g=238, b=172, a=255), &#x27;lightteal&#x27;: Color(r=144, g=228, b=193, a=255), &#x27;lightturquoise&#x27;: Color(r=126, g=244, b=204, a=255), &#x27;lighturple&#x27;: Color(r=179, g=111, b=246, a=255), &#x27;lightviolet&#x27;: Color(r=214, g=180, b=252, a=255), &#x27;lightyellow&#x27;: Color(r=255, g=254, b=122, a=255), &#x27;lightyellowgreen&#x27;: Color(r=204, g=253, b=127, a=255), &#x27;lightyellowishgreen&#x27;: Color(r=194, g=255, b=137, a=255), &#x27;lilac&#x27;: Color(r=206, g=162, b=253, a=255), &#x27;liliac&#x27;: Color(r=196, g=142, b=253, a=255), &#x27;lime&#x27;: Color(r=170, g=255, b=50, a=255), &#x27;limegreen&#x27;: Color(r=137, g=254, b=5, a=255), &#x27;limeyellow&#x27;: Color(r=208, g=254, b=29, a=255), &#x27;lipstick&#x27;: Color(r=213, g=23, b=78, a=255), &#x27;lipstickred&#x27;: Color(r=192, g=2, b=47, a=255), &#x27;macaroniandcheese&#x27;: Color(r=239, g=180, b=53, a=255), &#x27;magenta&#x27;: Color(r=194, g=0, b=120, a=255), &#x27;mahogany&#x27;: Color(r=74, g=1, b=0, a=255), &#x27;maize&#x27;: Color(r=244, g=208, b=84, a=255), &#x27;mango&#x27;: Color(r=255, g=166, b=43, a=255), &#x27;manilla&#x27;: Color(r=255, g=250, b=134, a=255), &#x27;marigold&#x27;: Color(r=252, g=192, b=6, a=255), &#x27;marine&#x27;: Color(r=4, g=46, b=96, a=255), &#x27;marineblue&#x27;: Color(r=1, g=56, b=106, a=255), &#x27;maroon&#x27;: Color(r=101, g=0, b=33, a=255), &#x27;mauve&#x27;: Color(r=174, g=113, b=129, a=255), &#x27;mediumblue&#x27;: Color(r=44, g=111, b=187, a=255), &#x27;mediumbrown&#x27;: Color(r=127, g=81, b=18, a=255), &#x27;mediumgreen&#x27;: Color(r=57, g=173, b=72, a=255), &#x27;mediumgrey&#x27;: Color(r=125, g=127, b=124, a=255), &#x27;mediumpink&#x27;: Color(r=243, g=97, b=150, a=255), &#x27;mediumpurple&#x27;: Color(r=158, g=67, b=162, a=255), &#x27;melon&#x27;: Color(r=255, g=120, b=85, a=255), &#x27;merlot&#x27;: Color(r=115, g=0, b=57, a=255), &#x27;metallicblue&#x27;: Color(r=79, g=115, b=142, a=255), &#x27;midblue&#x27;: Color(r=39, g=106, b=179, a=255), &#x27;midgreen&#x27;: Color(r=80, g=167, b=71, a=255), &#x27;midnight&#x27;: Color(r=3, g=1, b=45, a=255), &#x27;midnightblue&#x27;: Color(r=2, g=0, b=53, a=255), &#x27;midnightpurple&#x27;: Color(r=40, g=1, b=55, a=255), &#x27;militarygreen&#x27;: Color(r=102, g=124, b=62, a=255), &#x27;milkchocolate&#x27;: Color(r=127, g=78, b=30, a=255), &#x27;mint&#x27;: Color(r=159, g=254, b=176, a=255), &#x27;mintgreen&#x27;: Color(r=143, g=255, b=159, a=255), &#x27;mintygreen&#x27;: Color(r=11, g=247, b=125, a=255), &#x27;mocha&#x27;: Color(r=157, g=118, b=81, a=255), &#x27;moss&#x27;: Color(r=118, g=153, b=88, a=255), &#x27;mossgreen&#x27;: Color(r=101, g=139, b=56, a=255), &#x27;mossygreen&#x27;: Color(r=99, g=139, b=39, a=255), &#x27;mud&#x27;: Color(r=115, g=92, b=18, a=255), &#x27;mudbrown&#x27;: Color(r=96, g=70, b=15, a=255), &#x27;muddybrown&#x27;: Color(r=136, g=104, b=6, a=255), &#x27;muddygreen&#x27;: Color(r=101, g=116, b=50, a=255), &#x27;muddyyellow&#x27;: Color(r=191, g=172, b=5, a=255), &#x27;mudgreen&#x27;: Color(r=96, g=102, b=2, a=255), &#x27;mulberry&#x27;: Color(r=146, g=10, b=78, a=255), &#x27;murkygreen&#x27;: Color(r=108, g=122, b=14, a=255), &#x27;mushroom&#x27;: Color(r=186, g=158, b=136, a=255), &#x27;mustard&#x27;: Color(r=206, g=179, b=1, a=255), &#x27;mustardbrown&#x27;: Color(r=172, g=126, b=4, a=255), &#x27;mustardgreen&#x27;: Color(r=168, g=181, b=4, a=255), &#x27;mustardyellow&#x27;: Color(r=210, g=189, b=10, a=255), &#x27;mutedblue&#x27;: Color(r=59, g=113, b=159, a=255), &#x27;mutedgreen&#x27;: Color(r=95, g=160, b=82, a=255), &#x27;mutedpink&#x27;: Color(r=209, g=118, b=143, a=255), &#x27;mutedpurple&#x27;: Color(r=128, g=91, b=135, a=255), &#x27;nastygreen&#x27;: Color(r=112, g=178, b=63, a=255), &#x27;navy&#x27;: Color(r=1, g=21, b=62, a=255), &#x27;navyblue&#x27;: Color(r=0, g=17, b=70, a=255), &#x27;navygreen&#x27;: Color(r=53, g=83, b=10, a=255), &#x27;neonblue&#x27;: Color(r=4, g=217, b=255, a=255), &#x27;neongreen&#x27;: Color(r=12, g=255, b=12, a=255), &#x27;neonpink&#x27;: Color(r=254, g=1, b=154, a=255), &#x27;neonpurple&#x27;: Color(r=188, g=19, b=254, a=255), &#x27;neonred&#x27;: Color(r=255, g=7, b=58, a=255), &#x27;neonyellow&#x27;: Color(r=207, g=255, b=4, a=255), &#x27;niceblue&#x27;: Color(r=16, g=122, b=176, a=255), &#x27;nightblue&#x27;: Color(r=4, g=3, b=72, a=255), &#x27;ocean&#x27;: Color(r=1, g=123, b=146, a=255), &#x27;oceanblue&#x27;: Color(r=3, g=113, b=156, a=255), &#x27;oceangreen&#x27;: Color(r=61, g=153, b=115, a=255), &#x27;ocher&#x27;: Color(r=191, g=155, b=12, a=255), &#x27;ochre&#x27;: Color(r=191, g=144, b=5, a=255), &#x27;ocre&#x27;: Color(r=198, g=156, b=4, a=255), &#x27;offblue&#x27;: Color(r=86, g=132, b=174, a=255), &#x27;offgreen&#x27;: Color(r=107, g=163, b=83, a=255), &#x27;offwhite&#x27;: Color(r=255, g=255, b=228, a=255), &#x27;offyellow&#x27;: Color(r=241, g=243, b=63, a=255), &#x27;oldpink&#x27;: Color(r=199, g=121, b=134, a=255), &#x27;oldrose&#x27;: Color(r=200, g=127, b=137, a=255), &#x27;olive&#x27;: Color(r=110, g=117, b=14, a=255), &#x27;olivebrown&#x27;: Color(r=100, g=84, b=3, a=255), &#x27;olivedrab&#x27;: Color(r=111, g=118, b=50, a=255), &#x27;olivegreen&#x27;: Color(r=103, g=122, b=4, a=255), &#x27;oliveyellow&#x27;: Color(r=194, g=183, b=9, a=255), &#x27;orange&#x27;: Color(r=249, g=115, b=6, a=255), &#x27;orangebrown&#x27;: Color(r=190, g=100, b=0, a=255), &#x27;orangeish&#x27;: Color(r=253, g=141, b=73, a=255), &#x27;orangepink&#x27;: Color(r=255, g=111, b=82, a=255), &#x27;orangered&#x27;: Color(r=254, g=66, b=15, a=255), &#x27;orangered2&#x27;: Color(r=253, g=65, b=30, a=255), &#x27;orangeybrown&#x27;: Color(r=177, g=96, b=2, a=255), &#x27;orangeyellow&#x27;: Color(r=255, g=173, b=1, a=255), &#x27;orangeyred&#x27;: Color(r=250, g=66, b=36, a=255), &#x27;orangeyyellow&#x27;: Color(r=253, g=185, b=21, a=255), &#x27;orangish&#x27;: Color(r=252, g=130, b=74, a=255), &#x27;orangishbrown&#x27;: Color(r=178, g=95, b=3, a=255), &#x27;orangishred&#x27;: Color(r=244, g=54, b=5, a=255), &#x27;orchid&#x27;: Color(r=200, g=117, b=196, a=255), &#x27;pale&#x27;: Color(r=255, g=249, b=208, a=255), &#x27;paleaqua&#x27;: Color(r=184, g=255, b=235, a=255), &#x27;paleblue&#x27;: Color(r=208, g=254, b=254, a=255), &#x27;palebrown&#x27;: Color(r=177, g=145, b=110, a=255), &#x27;palecyan&#x27;: Color(r=183, g=255, b=250, a=255), &#x27;palegold&#x27;: Color(r=253, g=222, b=108, a=255), &#x27;palegreen&#x27;: Color(r=199, g=253, b=181, a=255), &#x27;palegrey&#x27;: Color(r=253, g=253, b=254, a=255), &#x27;palelavender&#x27;: Color(r=238, g=207, b=254, a=255), &#x27;palelightgreen&#x27;: Color(r=177, g=252, b=153, a=255), &#x27;palelilac&#x27;: Color(r=228, g=203, b=255, a=255), &#x27;palelime&#x27;: Color(r=190, g=253, b=115, a=255), &#x27;palelimegreen&#x27;: Color(r=177, g=255, b=101, a=255), &#x27;palemagenta&#x27;: Color(r=215, g=103, b=173, a=255), &#x27;palemauve&#x27;: Color(r=254, g=208, b=252, a=255), &#x27;paleolive&#x27;: Color(r=185, g=204, b=129, a=255), &#x27;paleolivegreen&#x27;: Color(r=177, g=210, b=123, a=255), &#x27;paleorange&#x27;: Color(r=255, g=167, b=86, a=255), &#x27;palepeach&#x27;: Color(r=255, g=229, b=173, a=255), &#x27;palepink&#x27;: Color(r=255, g=207, b=220, a=255), &#x27;palepurple&#x27;: Color(r=183, g=144, b=212, a=255), &#x27;palered&#x27;: Color(r=217, g=84, b=77, a=255), &#x27;palerose&#x27;: Color(r=253, g=193, b=197, a=255), &#x27;palesalmon&#x27;: Color(r=255, g=177, b=154, a=255), &#x27;paleskyblue&#x27;: Color(r=189, g=246, b=254, a=255), &#x27;paleteal&#x27;: Color(r=130, g=203, b=178, a=255), &#x27;paleturquoise&#x27;: Color(r=165, g=251, b=213, a=255), &#x27;paleviolet&#x27;: Color(r=206, g=174, b=250, a=255), &#x27;paleyellow&#x27;: Color(r=255, g=255, b=132, a=255), &#x27;parchment&#x27;: Color(r=254, g=252, b=175, a=255), &#x27;pastelblue&#x27;: Color(r=162, g=191, b=254, a=255), &#x27;pastelgreen&#x27;: Color(r=176, g=255, b=157, a=255), &#x27;pastelorange&#x27;: Color(r=255, g=150, b=79, a=255), &#x27;pastelpink&#x27;: Color(r=255, g=186, b=205, a=255), &#x27;pastelpurple&#x27;: Color(r=202, g=160, b=255, a=255), &#x27;pastelred&#x27;: Color(r=219, g=88, b=86, a=255), &#x27;pastelyellow&#x27;: Color(r=255, g=254, b=113, a=255), &#x27;pea&#x27;: Color(r=164, g=191, b=32, a=255), &#x27;peach&#x27;: Color(r=255, g=176, b=124, a=255), &#x27;peachypink&#x27;: Color(r=255, g=154, b=138, a=255), &#x27;peacockblue&#x27;: Color(r=1, g=103, b=149, a=255), &#x27;peagreen&#x27;: Color(r=142, g=171, b=18, a=255), &#x27;pear&#x27;: Color(r=203, g=248, b=95, a=255), &#x27;peasoup&#x27;: Color(r=146, g=153, b=1, a=255), &#x27;peasoupgreen&#x27;: Color(r=148, g=166, b=23, a=255), &#x27;periwinkle&#x27;: Color(r=142, g=130, b=254, a=255), &#x27;periwinkleblue&#x27;: Color(r=143, g=153, b=251, a=255), &#x27;perrywinkle&#x27;: Color(r=143, g=140, b=231, a=255), &#x27;petrol&#x27;: Color(r=0, g=95, b=106, a=255), &#x27;pigpink&#x27;: Color(r=231, g=142, b=165, a=255), &#x27;pine&#x27;: Color(r=43, g=93, b=52, a=255), &#x27;pinegreen&#x27;: Color(r=10, g=72, b=30, a=255), &#x27;pink&#x27;: Color(r=255, g=129, b=192, a=255), &#x27;pinkish&#x27;: Color(r=212, g=106, b=126, a=255), &#x27;pinkishbrown&#x27;: Color(r=177, g=114, b=97, a=255), &#x27;pinkishgrey&#x27;: Color(r=200, g=172, b=169, a=255), &#x27;pinkishorange&#x27;: Color(r=255, g=114, b=76, a=255), &#x27;pinkishpurple&#x27;: Color(r=214, g=72, b=215, a=255), &#x27;pinkishred&#x27;: Color(r=241, g=12, b=69, a=255), &#x27;pinkishtan&#x27;: Color(r=217, g=155, b=130, a=255), &#x27;pinkpurple&#x27;: Color(r=239, g=29, b=231, a=255), &#x27;pinkpurple2&#x27;: Color(r=219, g=75, b=218, a=255), &#x27;pinkred&#x27;: Color(r=245, g=5, b=79, a=255), &#x27;pinky&#x27;: Color(r=252, g=134, b=170, a=255), &#x27;pinkypurple&#x27;: Color(r=201, g=76, b=190, a=255), &#x27;pinkyred&#x27;: Color(r=252, g=38, b=71, a=255), &#x27;pissyellow&#x27;: Color(r=221, g=214, b=24, a=255), &#x27;pistachio&#x27;: Color(r=192, g=250, b=139, a=255), &#x27;plum&#x27;: Color(r=88, g=15, b=65, a=255), &#x27;plumpurple&#x27;: Color(r=78, g=5, b=80, a=255), &#x27;poisongreen&#x27;: Color(r=64, g=253, b=20, a=255), &#x27;poo&#x27;: Color(r=143, g=115, b=3, a=255), &#x27;poobrown&#x27;: Color(r=136, g=95, b=1, a=255), &#x27;poop&#x27;: Color(r=127, g=94, b=0, a=255), &#x27;poopbrown&#x27;: Color(r=122, g=89, b=1, a=255), &#x27;poopgreen&#x27;: Color(r=111, g=124, b=0, a=255), &#x27;powderblue&#x27;: Color(r=177, g=209, b=252, a=255), &#x27;powderpink&#x27;: Color(r=255, g=178, b=208, a=255), &#x27;primaryblue&#x27;: Color(r=8, g=4, b=249, a=255), &#x27;prussianblue&#x27;: Color(r=0, g=69, b=119, a=255), &#x27;puce&#x27;: Color(r=165, g=126, b=82, a=255), &#x27;puke&#x27;: Color(r=165, g=165, b=2, a=255), &#x27;pukebrown&#x27;: Color(r=148, g=119, b=6, a=255), &#x27;pukegreen&#x27;: Color(r=154, g=174, b=7, a=255), &#x27;pukeyellow&#x27;: Color(r=194, g=190, b=14, a=255), &#x27;pumpkin&#x27;: Color(r=225, g=119, b=1, a=255), &#x27;pumpkinorange&#x27;: Color(r=251, g=125, b=7, a=255), &#x27;pureblue&#x27;: Color(r=2, g=3, b=226, a=255), &#x27;purple&#x27;: Color(r=126, g=30, b=156, a=255), &#x27;purpleblue&#x27;: Color(r=93, g=33, b=208, a=255), &#x27;purpleblue2&#x27;: Color(r=99, g=45, b=233, a=255), &#x27;purplebrown&#x27;: Color(r=103, g=58, b=63, a=255), &#x27;purplegrey&#x27;: Color(r=134, g=111, b=133, a=255), &#x27;purpleish&#x27;: Color(r=152, g=86, b=141, a=255), &#x27;purpleishblue&#x27;: Color(r=97, g=64, b=239, a=255), &#x27;purpleishpink&#x27;: Color(r=223, g=78, b=200, a=255), &#x27;purplepink&#x27;: Color(r=215, g=37, b=222, a=255), &#x27;purplepink2&#x27;: Color(r=224, g=63, b=216, a=255), &#x27;purplered&#x27;: Color(r=153, g=1, b=71, a=255), &#x27;purpley&#x27;: Color(r=135, g=86, b=228, a=255), &#x27;purpleyblue&#x27;: Color(r=95, g=52, b=231, a=255), &#x27;purpleygrey&#x27;: Color(r=148, g=126, b=148, a=255), &#x27;purpleypink&#x27;: Color(r=200, g=60, b=185, a=255), &#x27;purplish&#x27;: Color(r=148, g=86, b=140, a=255), &#x27;purplishblue&#x27;: Color(r=96, g=30, b=249, a=255), &#x27;purplishbrown&#x27;: Color(r=107, g=66, b=71, a=255), &#x27;purplishgrey&#x27;: Color(r=122, g=104, b=127, a=255), &#x27;purplishpink&#x27;: Color(r=206, g=93, b=174, a=255), &#x27;purplishred&#x27;: Color(r=176, g=5, b=75, a=255), &#x27;purply&#x27;: Color(r=152, g=63, b=178, a=255), &#x27;purplyblue&#x27;: Color(r=102, g=26, b=238, a=255), &#x27;purplypink&#x27;: Color(r=240, g=117, b=230, a=255), &#x27;putty&#x27;: Color(r=190, g=174, b=138, a=255), &#x27;racinggreen&#x27;: Color(r=1, g=70, b=0, a=255), &#x27;radioactivegreen&#x27;: Color(r=44, g=250, b=31, a=255), &#x27;raspberry&#x27;: Color(r=176, g=1, b=73, a=255), &#x27;rawsienna&#x27;: Color(r=154, g=98, b=0, a=255), &#x27;rawumber&#x27;: Color(r=167, g=94, b=9, a=255), &#x27;reallylightblue&#x27;: Color(r=212, g=255, b=255, a=255), &#x27;red&#x27;: Color(r=229, g=0, b=0, a=255), &#x27;redbrown&#x27;: Color(r=139, g=46, b=22, a=255), &#x27;reddish&#x27;: Color(r=196, g=66, b=64, a=255), &#x27;reddishbrown&#x27;: Color(r=127, g=43, b=10, a=255), &#x27;reddishgrey&#x27;: Color(r=153, g=117, b=112, a=255), &#x27;reddishorange&#x27;: Color(r=248, g=72, b=28, a=255), &#x27;reddishpink&#x27;: Color(r=254, g=44, b=84, a=255), &#x27;reddishpurple&#x27;: Color(r=145, g=9, b=81, a=255), &#x27;reddybrown&#x27;: Color(r=110, g=16, b=5, a=255), &#x27;redorange&#x27;: Color(r=253, g=60, b=6, a=255), &#x27;redpink&#x27;: Color(r=250, g=42, b=85, a=255), &#x27;redpurple&#x27;: Color(r=130, g=7, b=71, a=255), &#x27;redviolet&#x27;: Color(r=158, g=1, b=104, a=255), &#x27;redwine&#x27;: Color(r=140, g=0, b=52, a=255), &#x27;richblue&#x27;: Color(r=2, g=27, b=249, a=255), &#x27;richpurple&#x27;: Color(r=114, g=0, b=88, a=255), &#x27;robineggblue&#x27;: Color(r=138, g=241, b=254, a=255), &#x27;robinsegg&#x27;: Color(r=109, g=237, b=253, a=255), &#x27;robinseggblue&#x27;: Color(r=152, g=239, b=249, a=255), &#x27;rosa&#x27;: Color(r=254, g=134, b=164, a=255), &#x27;rose&#x27;: Color(r=207, g=98, b=117, a=255), &#x27;rosepink&#x27;: Color(r=247, g=135, b=154, a=255), &#x27;rosered&#x27;: Color(r=190, g=1, b=60, a=255), &#x27;rosypink&#x27;: Color(r=246, g=104, b=142, a=255), &#x27;rouge&#x27;: Color(r=171, g=18, b=57, a=255), &#x27;royal&#x27;: Color(r=12, g=23, b=147, a=255), &#x27;royalblue&#x27;: Color(r=5, g=4, b=170, a=255), &#x27;royalpurple&#x27;: Color(r=75, g=0, b=110, a=255), &#x27;ruby&#x27;: Color(r=202, g=1, b=71, a=255), &#x27;russet&#x27;: Color(r=161, g=57, b=5, a=255), &#x27;rust&#x27;: Color(r=168, g=60, b=9, a=255), &#x27;rustbrown&#x27;: Color(r=139, g=49, b=3, a=255), &#x27;rustorange&#x27;: Color(r=196, g=85, b=8, a=255), &#x27;rustred&#x27;: Color(r=170, g=39, b=4, a=255), &#x27;rustyorange&#x27;: Color(r=205, g=89, b=9, a=255), &#x27;rustyred&#x27;: Color(r=175, g=47, b=13, a=255), &#x27;saffron&#x27;: Color(r=254, g=178, b=9, a=255), &#x27;sage&#x27;: Color(r=135, g=174, b=115, a=255), &#x27;sagegreen&#x27;: Color(r=136, g=179, b=120, a=255), &#x27;salmon&#x27;: Color(r=255, g=121, b=108, a=255), &#x27;salmonpink&#x27;: Color(r=254, g=123, b=124, a=255), &#x27;sand&#x27;: Color(r=226, g=202, b=118, a=255), &#x27;sandbrown&#x27;: Color(r=203, g=165, b=96, a=255), &#x27;sandstone&#x27;: Color(r=201, g=174, b=116, a=255), &#x27;sandy&#x27;: Color(r=241, g=218, b=122, a=255), &#x27;sandybrown&#x27;: Color(r=196, g=166, b=97, a=255), &#x27;sandyellow&#x27;: Color(r=252, g=225, b=102, a=255), &#x27;sandyyellow&#x27;: Color(r=253, g=238, b=115, a=255), &#x27;sapgreen&#x27;: Color(r=92, g=139, b=21, a=255), &#x27;sapphire&#x27;: Color(r=33, g=56, b=171, a=255), &#x27;scarlet&#x27;: Color(r=190, g=1, b=25, a=255), &#x27;sea&#x27;: Color(r=60, g=153, b=146, a=255), &#x27;seablue&#x27;: Color(r=4, g=116, b=149, a=255), &#x27;seafoam&#x27;: Color(r=128, g=249, b=173, a=255), &#x27;seafoamblue&#x27;: Color(r=120, g=209, b=182, a=255), &#x27;seafoamgreen&#x27;: Color(r=122, g=249, b=171, a=255), &#x27;seagreen&#x27;: Color(r=83, g=252, b=161, a=255), &#x27;seaweed&#x27;: Color(r=24, g=209, b=123, a=255), &#x27;seaweedgreen&#x27;: Color(r=53, g=173, b=107, a=255), &#x27;sepia&#x27;: Color(r=152, g=94, b=43, a=255), &#x27;shamrock&#x27;: Color(r=1, g=180, b=76, a=255), &#x27;shamrockgreen&#x27;: Color(r=2, g=193, b=77, a=255), &#x27;shit&#x27;: Color(r=127, g=95, b=0, a=255), &#x27;shitbrown&#x27;: Color(r=123, g=88, b=4, a=255), &#x27;shitgreen&#x27;: Color(r=117, g=128, b=0, a=255), &#x27;shockingpink&#x27;: Color(r=254, g=2, b=162, a=255), &#x27;sickgreen&#x27;: Color(r=157, g=185, b=44, a=255), &#x27;sicklygreen&#x27;: Color(r=148, g=178, b=28, a=255), &#x27;sicklyyellow&#x27;: Color(r=208, g=228, b=41, a=255), &#x27;sienna&#x27;: Color(r=169, g=86, b=30, a=255), &#x27;silver&#x27;: Color(r=197, g=201, b=199, a=255), &#x27;sky&#x27;: Color(r=130, g=202, b=252, a=255), &#x27;skyblue&#x27;: Color(r=117, g=187, b=253, a=255), &#x27;slate&#x27;: Color(r=81, g=101, b=114, a=255), &#x27;slateblue&#x27;: Color(r=91, g=124, b=153, a=255), &#x27;slategreen&#x27;: Color(r=101, g=141, b=109, a=255), &#x27;slategrey&#x27;: Color(r=89, g=101, b=109, a=255), &#x27;slimegreen&#x27;: Color(r=153, g=204, b=4, a=255), &#x27;snot&#x27;: Color(r=172, g=187, b=13, a=255), &#x27;snotgreen&#x27;: Color(r=157, g=193, b=0, a=255), &#x27;softblue&#x27;: Color(r=100, g=136, b=234, a=255), &#x27;softgreen&#x27;: Color(r=111, g=194, b=118, a=255), &#x27;softpink&#x27;: Color(r=253, g=176, b=192, a=255), &#x27;softpurple&#x27;: Color(r=166, g=111, b=181, a=255), &#x27;spearmint&#x27;: Color(r=30, g=248, b=118, a=255), &#x27;springgreen&#x27;: Color(r=169, g=249, b=113, a=255), &#x27;spruce&#x27;: Color(r=10, g=95, b=56, a=255), &#x27;squash&#x27;: Color(r=242, g=171, b=21, a=255), &#x27;steel&#x27;: Color(r=115, g=133, b=149, a=255), &#x27;steelblue&#x27;: Color(r=90, g=125, b=154, a=255), &#x27;steelgrey&#x27;: Color(r=111, g=130, b=138, a=255), &#x27;stone&#x27;: Color(r=173, g=165, b=135, a=255), &#x27;stormyblue&#x27;: Color(r=80, g=123, b=156, a=255), &#x27;straw&#x27;: Color(r=252, g=246, b=121, a=255), &#x27;strawberry&#x27;: Color(r=251, g=41, b=67, a=255), &#x27;strongblue&#x27;: Color(r=12, g=6, b=247, a=255), &#x27;strongpink&#x27;: Color(r=255, g=7, b=137, a=255), &#x27;sunflower&#x27;: Color(r=255, g=197, b=18, a=255), &#x27;sunfloweryellow&#x27;: Color(r=255, g=218, b=3, a=255), &#x27;sunnyyellow&#x27;: Color(r=255, g=249, b=23, a=255), &#x27;sunshineyellow&#x27;: Color(r=255, g=253, b=55, a=255), &#x27;sunyellow&#x27;: Color(r=255, g=223, b=34, a=255), &#x27;swamp&#x27;: Color(r=105, g=131, b=57, a=255), &#x27;swampgreen&#x27;: Color(r=116, g=133, b=0, a=255), &#x27;tan&#x27;: Color(r=209, g=178, b=111, a=255), &#x27;tanbrown&#x27;: Color(r=171, g=126, b=76, a=255), &#x27;tangerine&#x27;: Color(r=255, g=148, b=8, a=255), &#x27;tangreen&#x27;: Color(r=169, g=190, b=112, a=255), &#x27;taupe&#x27;: Color(r=185, g=162, b=129, a=255), &#x27;tea&#x27;: Color(r=101, g=171, b=124, a=255), &#x27;teagreen&#x27;: Color(r=189, g=248, b=163, a=255), &#x27;teal&#x27;: Color(r=2, g=147, b=134, a=255), &#x27;tealblue&#x27;: Color(r=1, g=136, b=159, a=255), &#x27;tealgreen&#x27;: Color(r=37, g=163, b=111, a=255), &#x27;tealish&#x27;: Color(r=36, g=188, b=168, a=255), &#x27;tealishgreen&#x27;: Color(r=12, g=220, b=115, a=255), &#x27;terracota&#x27;: Color(r=203, g=104, b=67, a=255), &#x27;terracotta&#x27;: Color(r=201, g=100, b=59, a=255), &#x27;terracotta2&#x27;: Color(r=202, g=102, b=65, a=255), &#x27;tiffanyblue&#x27;: Color(r=123, g=242, b=218, a=255), &#x27;tomato&#x27;: Color(r=239, g=64, b=38, a=255), &#x27;tomatored&#x27;: Color(r=236, g=45, b=1, a=255), &#x27;topaz&#x27;: Color(r=19, g=187, b=175, a=255), &#x27;toupe&#x27;: Color(r=199, g=172, b=125, a=255), &#x27;toxicgreen&#x27;: Color(r=97, g=222, b=42, a=255), &#x27;treegreen&#x27;: Color(r=42, g=126, b=25, a=255), &#x27;trueblue&#x27;: Color(r=1, g=15, b=204, a=255), &#x27;truegreen&#x27;: Color(r=8, g=148, b=4, a=255), &#x27;turquoise&#x27;: Color(r=6, g=194, b=172, a=255), &#x27;turquoiseblue&#x27;: Color(r=6, g=177, b=196, a=255), &#x27;turquoisegreen&#x27;: Color(r=4, g=244, b=137, a=255), &#x27;turtlegreen&#x27;: Color(r=117, g=184, b=79, a=255), &#x27;twilight&#x27;: Color(r=78, g=81, b=139, a=255), &#x27;twilightblue&#x27;: Color(r=10, g=67, b=122, a=255), &#x27;uglyblue&#x27;: Color(r=49, g=102, b=138, a=255), &#x27;uglybrown&#x27;: Color(r=125, g=113, b=3, a=255), &#x27;uglygreen&#x27;: Color(r=122, g=151, b=3, a=255), &#x27;uglypink&#x27;: Color(r=205, g=117, b=132, a=255), &#x27;uglypurple&#x27;: Color(r=164, g=66, b=160, a=255), &#x27;uglyyellow&#x27;: Color(r=208, g=193, b=1, a=255), &#x27;ultramarine&#x27;: Color(r=32, g=0, b=177, a=255), &#x27;ultramarineblue&#x27;: Color(r=24, g=5, b=219, a=255), &#x27;umber&#x27;: Color(r=178, g=100, b=0, a=255), &#x27;velvet&#x27;: Color(r=117, g=8, b=81, a=255), &#x27;vermillion&#x27;: Color(r=244, g=50, b=12, a=255), &#x27;verydarkblue&#x27;: Color(r=0, g=1, b=51, a=255), &#x27;verydarkbrown&#x27;: Color(r=29, g=2, b=0, a=255), &#x27;verydarkgreen&#x27;: Color(r=6, g=46, b=3, a=255), &#x27;verydarkpurple&#x27;: Color(r=42, g=1, b=52, a=255), &#x27;verylightblue&#x27;: Color(r=213, g=255, b=255, a=255), &#x27;verylightbrown&#x27;: Color(r=211, g=182, b=131, a=255), &#x27;verylightgreen&#x27;: Color(r=209, g=255, b=189, a=255), &#x27;verylightpink&#x27;: Color(r=255, g=244, b=242, a=255), &#x27;verylightpurple&#x27;: Color(r=246, g=206, b=252, a=255), &#x27;verypaleblue&#x27;: Color(r=214, g=255, b=254, a=255), &#x27;verypalegreen&#x27;: Color(r=207, g=253, b=188, a=255), &#x27;vibrantblue&#x27;: Color(r=3, g=57, b=248, a=255), &#x27;vibrantgreen&#x27;: Color(r=10, g=221, b=8, a=255), &#x27;vibrantpurple&#x27;: Color(r=173, g=3, b=222, a=255), &#x27;violet&#x27;: Color(r=154, g=14, b=234, a=255), &#x27;violetblue&#x27;: Color(r=81, g=10, b=201, a=255), &#x27;violetpink&#x27;: Color(r=251, g=95, b=252, a=255), &#x27;violetred&#x27;: Color(r=165, g=0, b=85, a=255), &#x27;viridian&#x27;: Color(r=30, g=145, b=103, a=255), &#x27;vividblue&#x27;: Color(r=21, g=46, b=255, a=255), &#x27;vividgreen&#x27;: Color(r=47, g=239, b=16, a=255), &#x27;vividpurple&#x27;: Color(r=153, g=0, b=250, a=255), &#x27;vomit&#x27;: Color(r=162, g=164, b=21, a=255), &#x27;vomitgreen&#x27;: Color(r=137, g=162, b=3, a=255), &#x27;vomityellow&#x27;: Color(r=199, g=193, b=12, a=255), &#x27;warmblue&#x27;: Color(r=75, g=87, b=219, a=255), &#x27;warmbrown&#x27;: Color(r=150, g=78, b=2, a=255), &#x27;warmgrey&#x27;: Color(r=151, g=138, b=132, a=255), &#x27;warmpink&#x27;: Color(r=251, g=85, b=129, a=255), &#x27;warmpurple&#x27;: Color(r=149, g=46, b=143, a=255), &#x27;washedoutgreen&#x27;: Color(r=188, g=245, b=166, a=255), &#x27;waterblue&#x27;: Color(r=14, g=135, b=204, a=255), &#x27;watermelon&#x27;: Color(r=253, g=70, b=89, a=255), &#x27;weirdgreen&#x27;: Color(r=58, g=229, b=127, a=255), &#x27;wheat&#x27;: Color(r=251, g=221, b=126, a=255), &#x27;white&#x27;: Color(r=255, g=255, b=255, a=255), &#x27;windowsblue&#x27;: Color(r=55, g=120, b=191, a=255), &#x27;wine&#x27;: Color(r=128, g=1, b=63, a=255), &#x27;winered&#x27;: Color(r=123, g=3, b=35, a=255), &#x27;wintergreen&#x27;: Color(r=32, g=249, b=134, a=255), &#x27;wisteria&#x27;: Color(r=168, g=125, b=194, a=255), &#x27;yellow&#x27;: Color(r=255, g=255, b=20, a=255), &#x27;yellowbrown&#x27;: Color(r=183, g=148, b=0, a=255), &#x27;yellowgreen&#x27;: Color(r=187, g=249, b=15, a=255), &#x27;yellowgreen2&#x27;: Color(r=200, g=253, b=61, a=255), &#x27;yellowgreen3&#x27;: Color(r=192, g=251, b=45, a=255), &#x27;yellowish&#x27;: Color(r=250, g=238, b=102, a=255), &#x27;yellowishbrown&#x27;: Color(r=155, g=122, b=1, a=255), &#x27;yellowishgreen&#x27;: Color(r=176, g=221, b=22, a=255), &#x27;yellowishorange&#x27;: Color(r=255, g=171, b=15, a=255), &#x27;yellowishtan&#x27;: Color(r=252, g=252, b=129, a=255), &#x27;yellowochre&#x27;: Color(r=203, g=157, b=6, a=255), &#x27;yelloworange&#x27;: Color(r=252, g=176, b=1, a=255), &#x27;yellowtan&#x27;: Color(r=255, g=227, b=110, a=255), &#x27;yellowybrown&#x27;: Color(r=174, g=139, b=12, a=255), &#x27;yellowygreen&#x27;: Color(r=191, g=241, b=40, a=255)}"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();